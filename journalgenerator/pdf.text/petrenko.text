dx
dt
6
.
. . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . .
.
. . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . .
........................
.......................... ¾
-. . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . .
. . . . . . . . . . . . .
. . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
.
. . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . .
.
. . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . .
.........................
.......................... . ..............
. . . . . . . . . . . . .
. . . . . . . . . . .
. . . . . . . . . . .
. . . . . . . . . . . . .
. . . . . . . . . . . . . .
?
ДИФФЕРЕНЦИАЛЬНЫЕ УРАВНЕНИЯ
И
ПРОЦЕССЫ УПРАВЛЕНИЯ
N 3, 2006
Электронный журнал,
рег. N П23275 от 07.03.97

e-mail: jodiff@mail.ru
Моделирование динамических систем
РАЗРАБОТКА И РЕАЛИЗАЦИЯ АЛГОРИТМОВ
ПОСТРОЕНИЯ СИМВОЛИЧЕСКОГО ОБРАЗА
Е.И.Петренко
Россия, 198904, Санкт-Петербург, Петродворец, Университетский пр., 28,
Санкт-Петербургский Государственный Университет,
математико-механический факультет,
e-mail: zhene@mail.ru
Реферат.
Главной причиной интереса к изучению динамических систем послужило
их все более возрастающее значение при исследовании процессов связанных с
окружающим миром. Развитие теории динамических систем стимулировало
активную разработку алгоритмов их исследования, а бурный рост возможно-
стей вычислительной техники позволил широко применять методы компью-
терного моделирования.
Для компьютерного моделирования и исследования динамической систе-
мы мы предлагаем использовать символический образ [5], который представ-
ляетсобойориентированныйграфиявляетсядискретизациейисходнойдина-
мической системы. Он строится по заданному покрытию фазового простран-
ства ячейкамиfD
i
g. Вершины графа соответствуют ячейкам, дуги   связям
между ними, а именно: вершины i и j соединяются дугой, если образ ячейки
D
i
при действии динамической системы пересекается с ячейкой D
j
. Многие
задачи исследования динамических систем могут быть сведены к задачам ис-
следования построенного ориентированного графа   символического образа.Дифференциальные уравнения и процессы управления, N. 3, 2006
В данной работе раскрываются аспекты реализации построения символи-
ческогообраза.Приводитсяспособвведениякоординат,представленияячеек.
Описаны четыре метода построения образа ячейки. Приводится их анализ и
сравнение производительности.
1 Определения
Пусть M   подмножество m-мерного пространстваR
m
: Как правило, M яв-
ляетсязамкнутымограниченныммножеством(компактом)илигладкиммно-
гообразием в R
m
: ПустьZ   множество целых чисел и R   множество ве-
щественных. Динамической системой называется непрерывное отображение
©(x;t); где x2M; t2Z (или t2R), такое, что
©:M£Z!M (или ©:M£R!M),
©(x;0) = x; (1)
©(©(x;t);s) = ©(x;t+s); (2)
где t; s принадлежатZ (илиR). Переменная t трактуется как время, а мно-
гообразие M называется фазовым пространством. Если t 2 Z, то мы по-
лучаем динамическую систему с дискретным временем, которая называется
каскадом или дискретной динамической системой. Часто дискретные дина-
мические системы порождены итерационными процессами вида x
n+1
=f(x
n
)
или разностными уравнениями. В случае t2R, мы имеем дело с системой с
непрерывным временем, которая называется непрерывной динамической си-
стемой. Иногда непрерывные динамические системы называются потоками.
Как правило, непрерывные динамические системы порождены автономными
системами дифференциальных уравнений _ x=f(x).
Мы будем рассматривать дискретные динамические системы, порожден-
ныеитерационнымипроцессамивидаx
n+1
=f(x
n
),гдеf  диффеоморфизм,
D   компакт, f :D½R
m
!D задает динамическую систему с дискретным
временем.
Определение 1 Степень отображения будем обозначать, и определять
следующим образом.
f
0
(x) = x;
f
p
(x) = f
p¡1
(f(x));p¸2;
f
¡p
(x) = (f
¡1
)
p
(x);p>0:
(3)

Определение 2 Пусть x
0
2 D. Положительной траекторией или орби-
той точки x
0
будем называть множество
©
x
0
;x
1
=f(x
0
);x
2
=f(x
1
)=f
2
(x
0
);:::
ª
: (4)
Отрицательная орбита или траектория точки x
0
  это множество
©
x
0
;x
1
=f
¡1
(x
0
);x
2
=f
¡1
(x
1
)=f
¡2
(x
0
);:::
ª
: (5)
Определение 3 Если f(x
0
) = x
0
, то такая точка называется неподвиж-
ной точкой динамической системы.
Например, рассмотрим динамическую систему, заданную отображением
f :x¡!2006x: (6)
Неподвижной точкой этой динамической системы является точка x
0
=0.
Определение 4 Если f
k
(x
0
) = x
0
, при k > 0 и для любого 0 < p < k
f
p
(x
0
)6=x
0
, то тогда точка x
0
называется k-периодической.
При численном моделировании динамических систем оказывается удоб-
ным рассматривать "-траектории.
Определение 5 Пусть задан набор точек fx
0
;x
1
;:::g. Тогда будем гово-
рить, что задана "-траектория отображения f, если
jx
i+1
¡f(x
i
)j<"; (7)
для всех i¸0
При помощи "-траектории мы можем задать погрешность определения ор-
биты или погрешность вычисления значения функции. Аналогично мож-
но определить (p;")-периодическую точку, "-неподвижную точку. Напри-
мер, при " = 2, "-траекторией системы (6) будет являться траектория
f1;2005;4022031;:::g
2 Символический образ динамической системы
ПустьC =fD
1
;:::;D
k
g   конечное покрытие компакта D замкнутыми мно-
жествами. Множества D
i
будем называть ячейками и f :D!D   диффео-
морфизм. По множествуD, диффеоморфизмуf и множеству ячеекC можно

построить ориентированный граф следующим образом: каждой ячейке D
i
со-
ответствует узел i графа. Между узлами i и j есть ориентированное ребро
тогда и только тогда, когда f(D
i
)\D
j
6=;. Таким образом построенный ори-
ентированный граф будем называть символическим образом динамической
системы, заданной диффеоморфизмом f.
Практически любую задачу исследования динамической системы мож-
но свести к задаче исследования ориентированного графа   символического
образа [5]. Например, можно локализовать неподвижные точки, периодиче-
ские траектории, оценивать спектр Морса динамической системы [4]. Между
исходной системой и символическим образом существуют следующие связи:
² траектории системы образуют пути на символическом образе;
² символический образ отражает глобальную структуру динамической си-
стемы;
² символический образ является конечным приближением динамической
системы;
² точность этого приближения зависит от максимального размера ячейки.
Введем несколько параметров символического образа. Будем обозначать:
² d   максимальный диаметр ячейки;
² r   нижняя граница символического образа. Определяется как мини-
мальное расстояние между f(D
i
) и множеством ячеек разбиения, кото-
рые не пересекаются с образом ячейки D
i
.
Символический образ можно рассматривать как конечную дискретную
аппроксимацию динамической системы. При этом более мелкое покрытие по-
рождает более точную аппроксимацию. С помощью процесса последователь-
ного подразбиения элементов покрытия можно строить последовательность
символических образов и, тем самым, уточнять структурные характеристики
системы.
Описанный метод может быть успешно применен к решению следующих
задач [5]:
² локализация периодических траекторий заданного периода;
² построение периодической траектории;

² локализация цепно-рекуррентного множества;
² построение (положительно, отрицательно) инвариантного множества;
² построение аттрактора и его области притяжения;
² построение фильтраций и точной последовательности фильтраций;
² определение структурного графа динамической системы;
² оценка топологической энтропии;
² оценка показателей Ляпунова;
² оценка спектра Морса;
² построение изолирующих окрестностей инвариантных множеств.
Определение 6 Последовательность z
k
вершин графа G называется допу-
стимым путем (или просто путем), если для любого k граф G содержит
ориентированное ребро z
k
! z
k+1
. Путь называется периодическим, если
последовательностьfz
k
g является периодической.
Существует естественная связь между допустимыми путями на символи-
ческом образе G и "-траекториями отображения f. Можно сказать, что до-
пустимый путь является следом"-траектории, причем обратное также верно.
Справедлива следующая теорема [5]:
Теорема 1 [5] Справедливы следующие утверждения для символического
образа G:
1. Если последовательность fz
k
g есть путь на символическом образе G
и x
k
2D
z
k
, тогда последовательностьfx
k
g есть "-траектория гомео-
морфизма f для любого " > q +d, где q и d   наибольшие диаметры
ячеек D
i
и их образов f(D
i
) соответственно. В частности, если по-
следовательностьfz
k
g есть периодический путь на символическом об-
разе, то последовательность fx
k
g есть "-периодическая траектория.
2. Если последовательность fz
k
g есть путь на символическом образе G,
тогда существует последовательность fx
k
g, x
k
2 M(z
k
), которая
есть "-траектория гомеоморфизма f для любого ">d.

3. Пусть последовательность fx
k
g есть "-траектория гомеоморфизма
f, " < r и x
k
2 D
z
k
, где r нижняя граница символического образа.
Тогда последовательность fz
k
g есть допустимый путь на символи-
ческом образе G. В частности, если последовательность fx
k
g есть
"-периодическая траектория, то последовательность fz
k
g есть пери-
одический путь на символическом образе G.
3 Анализ символического образа
При исследовании динамических систем наибольший интерес представля-
ют неподвижные точки, периодические орбиты, а также цепно-рекуррентные
множества.
Определение 7 Точка x называется цепно-рекуррентной, если для лю-
бого " > 0 существует периодическая "-траектория, проходящая через
x. Цепно-рекуррентным множеством называется множество всех цепно-
рекуррентных точек.
Цепно-рекуррентное множество инвариантно, замкнуто и содержит воз-
вращающиеся траектории всех типов [5]. В частности цепно-рекуррентное
множество содержит периодические орбиты.
Пусть Q   цепно-рекуррентное множество. Q(")   множество точек "-
траекторий. Тогда из определения цепно-рекуррентного множества и множе-
ства "-траекторий следует QµQ(") и Q("
1
)µQ("
2
), при "
1
·"
2
.
Определение 8 Вершина символического образа называется возвратной,
если существует периодический путь, проходящий через нее. Две верши-
ны символического образа называются эквивалентными, если существует
периодический путь, проходящий через них.
Согласно определению, множество возвратных вершин разбивается на
несколько классов эквивалентности. Ясно, что каждый периодический путь
» находится в некотором классе, который однозначно определяется по ».
Рассмотрим те ячейки D
i
, для которых вершина i является возвратной.
Такое множество зависит от выбранного покрытия C и от наибольшего диа-
метра ячейки d. Поскольку зависимость от d для нас наиболее важно, обо-
значим
P(d)=fx2D
i
:i   возвратныеg:
T(d)=fx2D
k
:k   невозвратныеg:
(8)

Теорема 2 [5] Справедливы следующие утверждения:
1. Множество P(d) является замкнутой окрестно-
стью цепно-рекуррентного множества. Кроме того, P(d) состоит из
"-периодических точек для любого ">q+d, т.е.
P(d)½Q("); ">q+d: (9)
2. Цепно-рекуррентное множество Q совпадает с пересечением мно-
жеств P(d) для всех положительных d:
Q=
\
d>0
P(d): (10)
3. Точки из множества T(d) не являются цепно-рекуррентными. Кро-
ме того, если " < r, то не существует "-периодической траектории,
проходящей через точку x множества T(d), т.е.
Q(")
\
T(d)=;; "<r: (11)
Множество T(d) является замкнутым по построению и пара P(d), T(d)
образует замкнутое покрытиеD. Следовательно, множествоP(d)nT(d) явля-
ется окрестностью цепно-рекуррентного множества Q. Из теоремы 2 следует
включение:
Q½Q("
1
)½DnT(d)=P(d)nT(d)½P(d)½Q("
2
); (12)
где "
1
<r <d<q+d<"
2
:
Отметим, что множества P(d) не являются монотонными по d, т.е. из
условияd
1
>d
2
необязательноследует,чтомножествоP(d
1
)содержитP(d
2
).
Однако,еслиC
2
являетсяподразбиениемпокрытияC
1
,тоP(d
2
)½P(d
1
).Это
свойство лежит в основе следующего алгоритма.
3.1 Алгоритм локализации цепно-рекуррентного множества
1. Строим исходное покрытие C компакта D. Находим символический об-
раз G отображения f. Заметим, что ячейки исходного покрытия могут
иметь произвольный диаметр d
0
.

2. Выделяем на графе G возвратные вершины fi
k
g. Если множество та-
ких вершин пустое, значит локализуемое цепно-рекуррентное множе-
ство является пустым и процесс его локализации прекращается. Ина-
че, используя их, находим зaмкнутую окрестность P = fx 2 D
i
k
:
i
k
  возвратныеg цепно-рекуррентного множества Q.
3. Разбиваем ячейки fD
i
k
g, соответствующие возвратным вершинам сим-
волического образа и, таким образом, определяем новое покрытие.
4. Строим символический образ G для нового покрытия.
5. Переходим ко второму пункту, если размеры ячеек построенного симво-
лического образа достаточно велики.
Повторяя процесс последовательного измельчения покрытия, мы получа-
ем последовательность окрестностей P
0
,P
1
,P
2
;::: цепно-рекуррентного мно-
жества Q и последовательность наибольших диаметров d
0
, d
1
, d
2
;::: ячеек,
соответствующих возвратным вершинам символического образа для покры-
тияC
k
. Следующая теорема обосновывает описанный алгоритм локализации
множества Q.
Теорема 3 [5] Последовательность множеств P
0
;P
1
;P
2
;::: обладает сле-
дующими свойствами:
1. Окрестности P
k
вложены друг в друга, т.е.
P
0
¾P
1
¾P
2
¾:::¾Q; (13)
2. Если наибольшие диаметры d
k
!0 при k!1, то
lim
k!1
P
k
=
\
k
P
k
=Q: (14)
Таким образом, описанный алгоритм дает монотонно убывающую после-
довательность окрестностей, сходящуюся к цепно-рекуррентному множеству.
Пусть G(V;E)   ориентированный граф, V   множество вершин, E  
множество ребер.
Определение 9 Вершины v
1
и v
2
сильно связаны в G, если существует
путь из v
1
в v
2
и из v
2
в v
1
. Если все вершины в ориентированном графе
сильно связаны, то G называется сильно связным.

Как было показано в [5], задача о локализации цепно-рекуррентного мно-
жества заданной динамической системы сводится к исследованию соответ-
ствующего символического образа и выделению на нем классов возвратных
вершин. Из определения возвратной вершины следует, что компоненте силь-
ной связности соответствует объединение классов возвратных вершин. Та-
ким образом, выделение таких классов на графе эквивалентно нахождению
компонент сильной связности. Для этого использован алгоритм Тарьяна [7],
который обладает достаточно хорошей оценкой сложности: O(n+m), где n
  количество узлов, m   количество ребер.
3.2 Алгоритм выделения компонент сильной связности
Алгоритм основан на обходе графа в глубину и использует два стека “стек” и
“маршрут”. Стек “маршрут” содержит путь от начальной вершины до теку-
щей. Каждая новая исследуемая вершина опускается в стек “маршрут”, а при
возвратах   извлекается. В “стек” добавляются все просмотренные вершины.
Все элементы найденной компоненты сильной связности удаляются после ее
окончательного формирования.
Заведем счетчик вершин с некоторым начальным значением и припишем
к каждой вершине 2 числовых параметра: “номер” и “связка”. Поле “номер”
определяется простой последовательной нумерацией вершин по мере их об-
хода алгоритмом. Поле “связка” для произвольной вершины хранит номер
другой вершины, которая была нумерована раньше. Если рассматриваемая
вершина является корнем дерева поиска компоненты сильной связности, то
значения полей “номер” и “связка” совпадут. Заметим, что значение поля
“связка” всегда меньше или равно значению поля “номер”. Схему работы ал-
горитма можно представить следующим образом.
² Шаг 1. Выбрать произвольную нерассмотренную вершину v, т.е. вер-
шину для которой значение поля “номер” не было инициализировано.
² Шаг 2.
– Положить вершину v в стеки “стек” и “маршрут”.
– Увеличить счетчик вершин на 1.
– Присвоить полям “номер” и “связка” этой вершины значение счетчи-
ка.

² Шаг 3. Выбрать некоторое нерассмотренное ребро, выходящее из вер-
шины v и рассмотреть вершину (w), в которую оно ведет.
– Еслиреброидетвнерассмотреннуюранеевершину,положитьv =w
и перейти на Шаг 2.
– Если ребро идет в уже рассмотренную вершину, перейти на Шаг 4.
– Если вершинаv не имеет неисследованных выходов и значение поля
“связка” меньше значения поля “номер”, перейти на Шаг 5.
– Если вершинаv не имеет неисследованных выходов и значение поля
“связка” равно значению поля “номер”, перейти на Шаг 6.
² Шаг 4.
– Если значение поля “номер” вершины w меньше значения поля “но-
мер” вершиныv иw находится в стеке “стек”, тогда положить значе-
ние поля “связка” вершины v равным минимуму из значений полей
“связка” вершин v и w.
– Перейти на Шаг 3.
² Шаг 5.
– Извлечь вершину v из стека “маршрут” и рассмотреть вершину, ко-
торая оказалась на вершине стека (u).
– Положить значение поля “связка” вершины u равным минимуму из
значений полей “связка” вершин v и u. Положить v равным u и пе-
рейти на Шаг 3.
² Шаг 6.
– Взять все вершины с вершины стека “стек” до вершины v вклю-
чительно и поместить их в новую компоненту сильной связности.
Больше эта компонента изменяться не будет.
– Извлечь вершину v из стека “маршрут”. Если в итоге “маршрут”
окажется пустым, перейти на Шаг 1, иначе положить v равным
вершине на вершине “маршрута” и перейти на Шаг 3.
Заметим, что мы можем получить компоненту сильной связности, состо-
ящую из одной вершины, при этом у нее нет ребра, ведущего в нее саму.
Для того чтобы не рассматривать такие “компоненты сильной связности”,
было добавлено дополнительное условие на шаге формирования компоненты

сильной связности (Шаг 6). А именно, если на верхушке стека “маршрут”
лежиттекущаявершинаv,тоонаединственнаявсвоейкомпоненте.Согласно
описанию алгоритма она становится компонентой сильной связности. Если у
этой вершины есть ребро идущее в неё, то это компонента сильной связности,
иначе это просто проходящая вершина.
На Шаге 3 алгоритма требуется находить необработанные ребра. Для
этого в каждой вершине графа будем хранить индекс последнего обработан-
ного ребра.
На Шаге 4 требуется проверять, находится ли данная вершина в стеке
“стек”. Для ускорения этой проверки введем в каждой вершине флаг. Флаг
будетустановлен,есливершинанаходитсявстеке.Длятого,чтобывыяснить,
содержится ли вершина в стеке будет достаточно посмотреть на значение
этого флага.
На Шаге 6 для формирования компоненты сильной связности будем со-
здаватьновуюструктуруданныхграфадлясохранениявыделенныхвершин.
Если для дальнейшего исследования требуются ребра, то после завершения
работы алгоритма локализации компонент сильной связности, можно восста-
новить ребра в выделенной компоненте сильной связности.
Обозначим G исходный граф. Пусть для каждой компоненты связности
графаG
i
заданнаборузловN
i
,входящихвнее.Тогдадляпостроенияграфов
компонент сильной связности G
N
i
графа G следует выполнить следующий
алгоритм:
² Для каждой вершины v компоненты сильной связности N
i
найти соот-
ветствующую ей вершину v
0
в исходном графе G.
² Для всех ребер вида v
0
! w
0
, w
0
вершина G, если вершина w
0
2 N
i
,
добавить это ребро в граф G
N
i
.
После завершения процесса локализации компонент сильной связности,
мы получаем набор из графов-компонент сильной связности исходного гра-
фа. Каждый такой граф соответствует цепно-рекуррентному множеству ис-
ходной системы [5]. Теперь исходный граф можно удалить из памяти.
4 Представление ячейки
Ячейка представляется координатами ее вершин и центра. В реализации ал-
горитма удобно рассматривать одинаковые ячейки, тогда информацию о раз-

мерах ячейки можно хранить отдельно и всего один раз. Каждая ячейка в
таком случае представляется точкой ее “верхнего левого угла” единственным
образом.
Дляизбежанияошибокприработесплавающейарифметикойнакомпью-
тере, рассматривается целочисленная система координат, за единицу длины,
в которой принимается размер ячейки.
Введем обозначение [a;b]=[a
1
;b
1
]£¢¢¢£[a
m
;b
m
].
Возьмем a;b2R
m
, такие, что a6=b, тогда
D =[a;b]½R
m
: (15)
Зафиксируем m положительных чисел p
1
;p
2
;:::;p
m
и разобьем каждый
отрезок [a
i
;b
i
] на p
i
равных частей:
d
i
=
b
i
¡a
i
p
i
;
W
j
i
= [a
i
+(j¡1)d
i
;a
i
+jd
i
];
[a
i
;b
i
] = W
1
i
[W
2
i
[¢¢¢[W
p
i
i
;
W
j
1
i
\W
j
2
i
= ;;j
1
6=j
2
:
(16)
Определим множество всех ячеек разбиения.
W =fW
j
1
1
£W
j
2
2
£¢¢¢£W
j
m
m
j1·j
k
·p
k
;1·k·mg: (17)
Элемент множества W будем называть ячейкой. Целочисленной коорди-
натой ячейки c 2 W будет набор значений (j
1
;j
2
;:::;j
m
), с которыми эта
ячейка входит в множество W.
Пусть a;b2R
k
, (p
i
)
k
i=1
  набор положительных чисел. Будем обозначать
через W([a;b];p) множество ячеек, построенное описанным выше способом.
Использование представления ячеек в целочисленной системе координат
позволяет уменьшить объем памяти, требуемой для хранения ячейки. Для
вычисления координат вершин ячейки в исходной системе координат прово-
дится линейное преобразование координат.
При построении последовательности символических образов ячейки, со-
ответствующие вершинам символического образа разбиваются на равное ко-
личество частей. Удобно задавать количество частей по каждой координате
отдельно. Пусть задан вектор разбиения ячеек r = (r
1
;r
2
;:::;r
m
), r
i
> 0.
Тогда каждой ячейке c с координатами (x
1
;x
2
;:::;x
m
) соответствуем множе-
ство ячеек (x
1
r
1
+j
1
;x
2
r
2
+j
2
;:::;x
m
r
m
+j
m
), где j
i
2[0;r
i
)\Z.

5 Структура данных символического образа
Процесс построения символического образа представляет собой последова-
тельную обработку ячеек. Для экономии памяти оказывается удобным хра-
нить в графе только вершины, соответствующие обработанным ячейкам.
Для того чтобы обеспечить быстрое построение символического обра-
за требуется, чтобы структура данных, представляющая ориентированный
граф, была устроена так, чтобы оптимально выполнялись следующие опера-
ции:
² быстрый поиск вершин. При добавлении новой вершины, нужно прове-
рить, не была ли эта вершина добавлена в граф раньше. И если была,
то нужно просто вернуть указатель на нее и не производить никаких
дополнительных действий;
² быстрый поиск ребер. При добавлении нового ребра, следует проверить,
не было ли добавлено это ребро раньше.
² оптимальное использование памяти. Построенная нами структура дан-
ных должна работать с большими графами.
Граф представляется с помощью списка инциденции, т.е. списка вершин,
каждая из которых содержит список исходящих из нее ребер. Для ускоре-
ния поиска списки ребер каждой вершины и список узлов хешируются при
помощи хэш-таблиц.
6 Методы построения образа ячейки
Построение символического образа основано на построении образа ячейки.
На рис. 1 показан образ ячейки (заштрихован темным цветом). Понятно, что
взависимостиотвыбораячеекпокрытия,попадающихвэтотобраз,мыбудем
получать различные графы.
6.1 Линейный метод
Вэтомметодемыоцениваемвозможныезначенияфункцииназаданнойячей-
ке. Для этого производятся следующие действия (рис. 2):
² берем ячейку разбиения D
i
;

Рис. 1: Разбиение множества D, образ ячейки.
² вычисляем значения функции системы f на вершинах ячейки D
i
;
² строим минимальный прямоугольник E, ориентированный по осям ко-
ординат, который содержит образы вершин ячейки D
i
;
² образом ячейки будем считать множество ячеек покрытия, которые пе-
ресекаются с построенным прямоугольником E.
Для ускорения работы этого метода значения функции системы в верши-
нах ячейки вычисляются с точностью до членов первого порядка при разло-
жении этой функции в ряд Тейлора в окрестности центра ячейки x
0
, т.е.
~
f(x)=f(x
0
)+Df(x
0
)(x¡x
0
); (18)
где x   вершина ячейки.
Чтобы увеличить вероятность того, что построенный этим методом об-
раз ячейки содержит все точки образа ячейки, можно ввести коэффициент
расширения полученного прямоугольника.
6.2 Точечный метод
Пусть дано число n 2 N
m
, т.е. n = (n
1
;n
2
;:::;n
m
), где n
i
2 N. Тогда то-
чечный метод с дроблением n действует следующим образом. В ячейке рав-
номерно берем n
i
точек по i-й координате. Образом ячейки будем называть

Рис. 2: Построения образа ячейки. Линейный метод.
набор ячеек, в которые попали образы равномерно брошенных точек (рис. 3).
Результат и время работы метода зависит от выбора значения вектора n.
Рис. 3: Построение образа ячейки при N =(2;2). Точечный метод.

6.3 Улучшенный точечный метод
Пусть даны число n 2N
m
и b 2 [0;1]
m
, тогда улучшенный точечный метод
с дроблением n и наложением b действует аналогично точечному методу с
дроблением n. Образу равномерно брошенной точки x будем сопоставлять
ячейку, которая содержит образ f(x) и все ячейки, которые находятся ближе
чем
b
i
d
i
2
от этой точки, где i номер оси, в направлении которой идет отрезок-
граница ячейки.
Если образ некоторой равномерно брошенной точки попадет на светло-
серую область ячейки (рис. 4), то тогда добавляем к результату не только
эту ячейку, но и соседнюю, как показано на рис. 4. Если точка лежит близко
от нескольких границ ячейки, то следует добавлять несколько ячеек (рис. 4).
Области ячейки Точка на краю ячейки
Точка, близкая к двум границам
Рис. 4: Точки на краю ячейки
Для поиска соседних ячеек был разработан специальный алгоритм, кото-
рый довольно эффективно вычисляет целочисленные координаты всех ячеек,
которые должны быть добавлены.
6.4 Адаптивный метод
Недостаток описанных выше методов построения образа ячейки заключается
в том, что эти методы вычисляют функцию в заранее определенных точках.
Предлагается новый метод построения образа ячейки, который будет вычис-
лять значение функции только в тех точках, выбранных в процессе работы
алгоритма, в которых это действительно необходимо, при этом количество

таких точек, по которым строится образ ячейки тоже будет зависеть от по-
ведения системы на данной ячейке. Такой способ построения образа ячейки
будем называть адаптивным методом.
Адаптивный метод работает по принципу точечного метода (см. 6.2).
Единственное отличие его заключено в том, что точки, в которых вычис-
ляются значения функции берутся не равномерно, как раньше, а исходя из
поведения системы.
Определение 10 Пусть есть множество точек P µ D и рефлексивное
симметричное отношение Ã на множестве P. Будем называть такое от-
ношение Ã отношением соседства. Пусть задана функция правой части
системы f = (f
1
;f
2
;:::;f
m
). Фиксируем " = ("
i
)
m
i=1
, "
i
> 0. Тогда будем на-
зывать множество P "-множеством для функции f и отношения Ã, если
для любых двух соседних (Ã(x;y)) точек x;y2P выполнено соотношение
jf
i
(x)¡f
i
(y)j·"
i
: (19)
Будем обозначать такое множество через P
"
f;Ã
.
Определение 11 Пусть задан набор m положительных чисел " = ("
i
)
m
i=1
.
Тогда "-окрестностью точки x = (x
1
;x
2
;:::;x
m
) 2 R
m
будем называть
множество
[x
1
¡"
1
;x
1
+"
1
]£[x
2
¡"
2
;x
2
+"
2
]£¢¢¢£[x
m
¡"
m
;x
m
+"
m
]½R
m
: (20)
Пусть задано множество P
"
f;Ã
, и ячейкаD
j
, все вершины которой принад-
лежат множеству P. Тогда образ ячейки будет состоять из "-окрестностей
образов точек, которые лежат в P\D
j
. При этом если элементы " достаточ-
но малы, т.е.
"
i
<
d
i
2
; (21)
то можно искать ячейки по принципу, описанному в улучшенном точечном
методе (см. 6.3).
Введенное отношение соседства Ã можно представить как неориентиро-
ванный граф, где вершины соответствуют точкам множества P, а Ã(x;y)
эквивалентно существованию ребра между вершинами x иy или совпадению
этих вершин x=y.

6.5 Алгоритм построения графа для P
"
f;Ã
Предположим, задано начальное множество точек и граф, определяющий
соотношение соседства для точек множества. Зафиксируем ">0.
Определение 12 Вектором длины ребра r между узлами графа x и y бу-
дем называть вектор пространства R
m
, компонентами которого будут
расстояния между проекциями образов точек x и y под действием функ-
ции системы f.
length(r)
i
=jf
i
(x)¡f
i
(y)j: (22)
На множестве векторов длин можно ввести отношение порядка. Будем
говорить, что вектор a больше вектора b, если это соотношение выполнено
покомпонентно.
Определение 13 Обозначим черезE(n) множество всех вершин, которые
соединены одним ребром с вершиной n.
Для того, чтобы заданное множество удовлетворяло требованиям опре-
деления, нужно проверить, что все ребра не длиннее ". Представим все ребра
исходного графа в виде упорядоченного по убыванию длины ребра списка L.
В качестве длины будем брать сумму модулей компонент вектора длин.
Пока список L не пуст, возьмем ребро r из начала списка и удалим его
из списка. Если ребро r между точками x и y такое, что вектор его длины
больше ", выполним следующее:
1. Добавим в граф разбиения новую вершину p с координатами (
x
i
+y
i
2
)
m
i=1
.
2. Удалим ребро r из графа.
3. Добавим ребра(x;p) и(y;p) в граф и в списокL, с сохранением порядка.
4. Добавимребраквершинам,принадлежащимE(x)\E(y)вграфисписок
L с сохранением порядка.
Основная сложность в данном алгоритме возникает на шаге 4. Нужно
определить, какие ребра добавлять к новому узлу графа, т.е. следует опре-
делить расширение отношения Ã на новую точку p. Следует наиболее полно
расширить отношение Ã, чтобы учесть все расстояния от новой точки p до
остальных точек графа.

На практике возникают ситуации, когда описанный процесс работает
очень медленно из-за большого количества добавлений новых вершин в граф.
В этом случае мы вводим ограничение на количество вершин в графе раз-
биения. А именно: множество ребер графа делится на два класса: ребра с
известной длиной и ребра, длина которых не определена. Алгоритм постро-
ения образа ячейки по графу разбиения работает аналогично приведенному
выше, однако, при построении "-окрестности для вершины этого графа бе-
рем " равным длине наибольшего ребра. Можно приписать каждому ребру
его длину и хранить упорядоченный список ребер для каждой вершины. В
вершинах можно хранить значение образа точки. Введенные оптимизации
позволили увеличить скорость работы алгоритма.
Пример работы алгоритма для 2-х мерного случая
Рассмотрим граф для множестваP, которое состоит из 4-х точек (рис. 5).
Предположим мы проверяем длину выделенного жирно ребра. Тогда, соглас-
но алгоритму, следует ввести новую точку и некоторое число новых ребер.
Пометим двойной линией ребра, которые имеют одну общую вершину с
рассматриваемым (выделенным жирно) ребром. Тогда, согласно алгоритму,
следует добавить новые ребра только к тем вершинам, которые соединены
ребрами с двумя вершинами рассматриваемого ребра (рис. 5).
Исходный граф Дробление ребра
Рис. 5: Разбиение длинного ребра.

Выделим такие вершины кругом. Тогда появляются два новых ребра, ко-
торые нарисованы серым цветом. Эти ребра будут добавлены в конец списка
L. На следующих шагах алгоритм проверит длины оставшихся ребер.
6.6 Начальное разбиение ячейки
Вершины графа разбиения соответствуют точкам фазового пространства ис-
следуемой системы. Результат и скорость работы адаптивного метода зави-
сит от выбора начального разбиения ячейки. Мы предлагаем следующие гра-
фы разбиения ячейки для одномерного, двумерного и трехмерного случаев
(рис. 6):
² для одномерного случая достаточно взять взять граф с одним ребром и
двумявершинами,которыесоответствуютграницамодномернойячейки;
² в двумерном случае будем рассматривать граф из 5 вершин   центр
ячейки и ее четыре вершины и 8 ребер, которые связывают соседние
вершины;
² втрехмерномслучаемырассматриваемвсевершиныячейки,всецентры
ее граней и центр ячейки. Соединяем ребром соседние вершины.
1-мерная ячейка
2-мерная ячейка 3-мерная ячейка
Рис. 6: Графы начального разбиения

7 Примеры
В этой части приведены примеры построения цепно-рекуррентных множеств
динамических систем с помощью построения последовательности символи-
ческих образов с использованием разных методов построения образа ячейки.
Приведены рисунки полученных цепно-рекуррентных множеств и таблицы
сравнений работы различных методов построения образа ячейки. В таблице
также показано время работы алгоритма и количество компонент сильной
связности графа.
Количество шагов процесса подразбиения символического образа опреде-
ляется экспериментально для каждой системы. Следующий шаг построения
символического образа проводится, если для этого хватит оперативной памя-
ти компьютера.
На каждом шаге построения символического образа будем разбивать ис-
ходнуюячейкуна2частипокаждойкоординате.Точечныйметодбудетстро-
ить образ ячейки по 2 точкам по каждой координате, улучшенный точечный
метод использует наложение, равное 10% от размера ячейки. Ограничение
на количество точек для построения образа ячейки адаптивным методом не
устанавливается.
Все эксперименты были проведены на компьютере IntelPentium 43Ghz,
1Gbоперативнойпамяти.ОперационнаясистемаMicrosoft Windows XP SP2.
7.1 Отображение Хенона [10]
Рассмотрим систему:
Ã
x
y
!
!
Ã
1¡ax
2
+by
x
!
; (23)
при a=1:4, b=0:3.
Известно [5], что при заданных параметрах у этой системы существу-
ет инвариантное множество в области [¡1:5;1:5]£ [¡
10
3
;
10
3
]. Возьмем D =
[¡10;10]£[¡10;10]. Проведем 13 шагов построения символического образа.
Сведем результаты вычислений в таблицу. На каждом шаге будем выполнять
построение символического образа и его анализ, согласно алгоритму, приве-
денному в 3.1, т.е. выделение цепно-рекуррентного множества с помощью

алгоритма выделения компонент сильной связности.
Метод Кол-во Кол-во Время Кол-во
узлов ребер работы компонент
Линейный метод 572 435 5 509 083 24 047 ms 2
Точечный метод 298 397 853 915 40 656 ms 5
Улучшенный точечный метод 505 152 3 877 289 465 563 ms 3
Адаптивный метод 507 637 5 171 045 464 844 ms 2
Каждым методом было сделано по 13 шагов. Начальное разбиение   по
10 ячеек на каждую координату. На каждом шаге ячейка разбивается на 2
части по каждой координате.
Приведем иллюстрации построенного цепно-рекуррентного множества.
Построенные цепно-рекуррентрые множества получились практически оди-
наковые, отличие видно только по количеству узлов. Самый маленький граф
получается при использовании точечного метода.

Линейный метод Адаптивный метод
Точечный метод Улучшенный точечный метод
Рис. 7: Результаты вычислений. Отображение Хенона.

7.2 Отображение Икеда [11]
Отображение имеет вид:
¿(x;y) = C
1
¡
C
3
1+x
2
+y
2
(24)
Ã
x
y
!
!
Ã
d ¡ C
2
(xcos¿(x;y)¡ysin¿(x;y))
C
2
(xsin¿(x;y)+ycos¿(x;y))
!
; (25)
где d=2, C
1
=0:4, C
2
=0:9, C
3
=6.
ПустьD =[¡10;10]£[¡10;10]. Отображение Икеда возникает при моде-
лировании оптических носителей (кристаллов) информации. Оно было рас-
смотрено и исследовано в [11, 13]; было показано, что при заданных парамет-
рах это отображение имеет цепно-рекуррентное множество.
Метод Кол-во Кол-во Время Кол-во Кол-во
узлов ребер работы компонент шагов
Линейный метод 3 117 236 25 988 943 172 484 ms 2 11
Точечный метод 1 732 774 4 378 370 112 359 ms 4 11
Улучшенный точечный метод 2 949 314 21 666 315 512 969 ms 2 11
Адаптивный метод 1 017 624 11 740 358 640 609 ms 2 10
Результаты вычисления символического образа отображения Икеда при-
ведены на рис. 8. Видно, что результат, полученный точечным методом
немного более “дырявый”, по сравнению с результатами, полученными дру-
гими методами. Согласно [13], наиболее хорошие результаты дали линейный
и адаптивный методы.

Линейный метод Адаптивный метод
Точечный метод Улучшенный точечный метод
Рис. 8: Результаты вычислений. Отображение Икеда.
7.3 Множество Жюлиа для r =¡0:12+0:74i [6, 12]
В исследованиях Пайтгена и Рихтера [6] были приведены алгоритмы и ре-
зультатыпостроениямножествЖюлиаинаполненныхмножествЖюлиадля
комплексного отображения
z!z
2
+r: (26)

Система, эквивалентная (26), [12]:
Ã
x
y
!
!
Ã
x
2
¡y
2
+ re
2xy + im
!
; (27)
где re=¡0:12, im=0:74
Описанные выше методы построения инвариантных множеств с помощью
символического образа дали похожие результаты.
Метод Кол-во Кол-во Время Кол-во Кол-во
узлов ребер работы компонент шагов
Линейный метод 2 412 630 20 337 231 1 174 000 ms 4 13
Точечный метод 92 140 1 406 ms 15 15
Улучшенный точечный метод 2 164 382 14 282 466 844 844 ms 6 13
Адаптивный метод 1 068 206 12 145 512 2 058 797 ms 2 12
На этом примере точечный метод показал очень странный результат. Это
можно объяснить тем, что количество точек, взятых для построения образа
ячейки слишком мало. Изображения построенных цепно-рекуррентых мно-
жеств приведены на рис. 9.

Линейный метод Адаптивный метод
Точечный метод Улучшенный точечный метод
Рис. 9: Результаты вычислений. Отображение z!z
2
+r, r =¡0:14+0:74i.
7.4 Множество Жюлиа в случае параболической неподвижной
точки [6]
Рассмотрим отображение на комплексной плоскости
f :z!z
2
+exp
2¼i
1
20
z: (28)

Для k-периодической точки z
0
ее орбита представляет собой множество
точекfz
0
;f(z
0
);f
2
(z
0
);:::;f
k¡1
(z
0
)g ( цикл периода k).
Определение 14 Пусть z
0
периодическая точка периода n. Собственным
значением точки x
0
для отображения f называется комплексное число
¸=(f
n
)
0
(z
0
)
По правилам дифференцирования сложной функции, мы получаем, что
это число одинаково для любой точки цикла.
Периодическая или неподвижная точка z
0
называется:
² притягивающей, если 0<j¸j<1,
² отталкивающей, еслиj¸j>1,
² сверхпритягивающей, если ¸=0,
² нейтральной, еслиj¸j=1.
Нейтральные точки в свою очередь тоже можно классифицировать.
Пустьj¸j=1 и¸   собственное значение точки z
0
для отображения f, тогда
его можно переписать в виде
¸=e
2¼iff
; ff2[0;1]: (29)
Неподвижная точка z
0
называется параболической, если ff2Q.
При заданных параметрах, для исследуемой системы z
0
= 0 являет-
ся неподвижной параболической точкой. Обозначим ¸   собственное число
функции f в точке z
0
. Поскольку ¸
20
= 1, множество Жюлиа подходит к
точке z
0
= 0 с 20 различных направлений (между 20 лепестками). Основ-
ная проблема моделирования поведения этой системы заключается в потере
точности компьютерных вычислений, в результате чего возникают лишние
периодические или неподвижные точки.
В этом примере техника символического образа для построения цепно-
реккурентных множеств позволяет построить лишь наполненные множества
Жюлиа, т.е. вышеописанная проблема остается.
Отметим, что в работах [2, 6] были приведены методы решения этой за-
дачи.
Проведем 10 шагов построения символического образа (см. 3.1). Полу-
ченные результаты сведем в таблицу:

Метод Кол-во Кол-во Время Кол-во Кол-во
узлов ребер работы компонент шагов
Линейный метод 2 737 711 24 507 847 182 922 ms 2 10
Точечный метод 2 684 661 14 941 697 1 145 969 ms 1 10
Улучшенный точечный метод 2 801 326 32 547 551 4 795 844 ms 1 10
Адаптивный метод 2 814 564 35 579 838 9 043 422 ms 1 10
Все методы дали визуально схожие результаты (рис. 10). Полученные
нами результаты согласуются с результатами, полученными в [2, 6].

Линейный метод Адаптивный метод
Точечный метод Улучшенный точечный метод
Рис. 10: Результаты вычислений в случае параболической неподвижной точки.
7.5 Двойное логистическое отображение [9]
Рассмотрим динамическую систему
Ã
x
y
!
!
Ã
(1¡a)x + aby(1¡y)
(1¡a)y + abx(1¡x)
!
; (30)
где a=0:38, b=4:11.

Данная система, была исследована в работах ([1], [9]). Были получены
оценки на область притяжения к бесконечно удаленной точке, в частности
было показано, что в этой области лежит внешность круга
(x¡r)
2
+(y¡r)
2
·2r
2
; (31)
где r =
1¡a+ab
2ab
.
При заданных значениях параметров инвариантным множеством явля-
ется объединением инвариантных кривых бифуркации Хопфа в окрестности
двух неподвижных точек, расположенных симметрично относительно глав-
ной диагонали.
Проведем построение символического образа и сравним полученные чис-
ленные результаты.
Метод Кол-во Кол-во Время Кол-во Кол-во
узлов ребер работы компонент шагов
Линейный метод 393 478 2 715 484 16 875 ms 15 13
Точечный метод 258 874 1 108 540 57 188 ms 13 13
Улучшенный точечный метод 492 115 4 868 381 320 266 ms 13 13
Адаптивный метод 503 102 5 275 606 517 078 ms 13 13
Цепно-рекуррентые множества показаны на рис. 11. На этой системе раз-
личия методов построения образа ячейки не видны. Однако по численным
показателям отличия все же есть.

Линейный метод Адаптивный метод
Точечный метод Улучшенный точечный метод
Рис. 11: Двойное логистическое отображение. a=0:38, b=4:11.
7.6 Отображение с задержкой [8]
Рассмотрим динамическую систему с задержкой.
Ã
x
y
!
!
Ã
y
ay(1¡x)
!
: (32)

Система обладает двумя неподвижными точками O
1
= (0;0) и O
2
=
(1¡
1
a
;1¡
1
a
). Начало координат является седловой точкой при a > 1. Соб-
ственныечиславточкеO
1
равны0иa.ТочкаO
2
являетсяфокусомприa>
5
4
.
Собственные числа в этой точке равны ¸
1;2
=
1
2
(1§
p
5¡4a). Фокус устой-
чив при a < 2, а при a > 2 фокус теряет устойчивость через бифуркацию
Хопфа. Возникающая при этой бифуркации инвариантная кривая разруша-
ется при a = 2:27 с появлением странного аттрактора [5]. Кроме того, при
этом значении параметра неустойчивая сепаратриса седловой точки касается
устойчивой, лежащей на ости OX.
Проведем построение цепно-рекуррентного множества при a = 2:21
(рис. 12). Разобьем каждый шаг построения символического образа с мень-
шим разбиением на два этапа. На первом этапе построения будем делить
ячейки только по первой координате на две равные части. На втором  
только вторые координаты. Каждый этап представляет собой отдельный шаг
построения уточненного символического образа. Такой способ позволяет по-
лучить символической образ с более мелким разбиением и затратить на это
меньше оперативной памяти, чем аналогичный процесс построения образа
ячейки, на каждом шагу которого деление проводилось сразу по нескольким
координатам.
Метод Кол-во Кол-во Время Кол-во Кол-во
узлов ребер работы компонент шагов
Линейный метод 1 489 037 12 863 578 357 859 ms 5 17
Точечный метод 378 579 954 108 311 875 ms 7 17
Улучшенный точечный метод 1 244 114 8 723 417 13 201 563 ms 6 17
Адаптивный метод 1 390 661 13 941 695 18 473 141 ms 6 17

Линейный метод Адаптивный метод
Точечный метод Улучшенный точечный метод
Рис. 12: Отображение с задержкой, a=2:21.
Проведем построение цепно-рекуррентного множества при a=2:27.
Метод Кол-во Кол-во Время Кол-во Кол-во
узлов ребер работы компонент шагов
Линейный метод 422 636 3 504 285 17 297 ms 2 13
Точечный метод 185 861 450 270 28 406 ms 3 13
Улучшенный точечный метод 367 115 2 501 061 252 625 ms 2 13
Адаптивный метод 381 186 3 712 343 388 609 ms 3 13

Изображениецепно-рекуррентыхмножествданонарис.13.Нарис.14по-
казана область вблизи седловой точки, где возникает сложное поведение ее
инвариантных многообразий. Визуально все методы построения образа ячей-
ки работают примерно одинакого. Согласно таблице, самым быстрым мето-
дом является линейный метод, самым медленным   адаптивный.
Линейный метод Адаптивный метод
Точечный метод Улучшенный точечный метод
Рис. 13: Отображение с задержкой при a=2:27

Линейный метод Адаптивный метод
Точечный метод Улучшенный точечный метод
Рис. 14: Отображение с задержкой, a=2:27. Область [0;0:1]£[0;0:1]
7.7 3х мерная модель Хищник-Жертва-Суперхищник [14]
В работах [5, 14] рассматривается следующая динамическая система

0
B
@
x
y
z
1
C
A
!
0
B
@
4:522xexp(¡y)
1+xmax(exp(¡y);k(z)k(y))
0:962xyexp(¡z)k(4yz)k(y)
4yz
1
C
A
; (33)
где k(t)=
1¡exp(¡t)
t
.
Пусть D = [0:01;10]£[0:01;10]£[0:01;10]. В этом примере рассматри-
вается трехмерная динамическая система. Для хранения ячейки требуется
больше памяти, время вычисления образа одной точки тоже увеличивает-
ся. Наиболее хорошие результаты построения инвариантного множества для
этой системы можно получить лишь используя все методы построения образа
ячейкивсовокупности.Эффективнымпопамятиоказываетсянакаждомша-
ге дробить ячейки только на две части (только по одной координате). В этом
случае прирост ячеек в построенном графе оказывается минимальным, что
позволяет уложиться в оперативную память компьютера и провести больше
итераций построения символического образа, тем самым построить символи-
ческий образ с меньшим разбиением.
Значение константы Липшица системы на множестве D оказывается
очень большим, в результате чего адаптивный метод может работать очень
медленно. Приходится вводить ограничения на количество узлов в графе
представления P
"
f;Ã
.
Результатыпостроенияцепно-рекуррентногомножестваприведенывтаб-
лице и на рис. 15.
Результаты работы каждого из методов для этого примера сильно отли-
чаются. Видно, что быстрее всего работает точечный метод, и самым долгим
является адаптивный метод, несмотря на введенные ограничения на граф (не
более 100 вершин в графе адаптивного метода для ячейки).
Метод Кол-во Кол-во Время Кол-во Кол-во
узлов ребер работы компонент шагов
Линейный метод 287 627 11 399 582 30 219 ms 1 7
Точечный метод 6 744 33 956 5 297 ms 7 7
Улучшенный точечный метод 110 361 3 771 889 43 359 ms 5 7
Адаптивный метод 150 514 6 525 427 1 167 094 ms 1 7

Линейный метод Адаптивный метод
Точечный метод Улучшенный точечный метод
Рис. 15: Результаты вычислений. 3-х мерная модель хищник-жертва-суперхищник.
8 Заключение
Сравним средние скорости работы описанных методов для исследованных
двумерных систем. Для этого для каждой из двумерных систем для каждо-
го метода вычислим среднее количество ячеек v, ребер e, построенных за 1
миллисекунду (ms), и значение отношения числа ребер к числу ячеек
e
v
.
Усреднимэтизначенияповсемисследованнымсистемамдлякаждогоме-

тода (~ v, ~ e и
g
e=v). Где под ~ v понимается среднее арифметическое. По каждому
из устредняемых параметров вычислим среднее квадратичное отклонение по
формуле
s
N
P
i=1
(v
i
¡~ v)
2
N
, где N количество значений. Сведем полученные резуль-
таты в таблицу.
Из собранных данных видно, что самым производительным оказывается
линейный метод. Самым быстрым оказывается точечный метод, но среднее
количество ребер на один узел покрытия оказывается довольно маленьким.
По этому показателю лидирует адаптивный метод, для которого в среднем
на каждую ячейку приходится чуть более 10 ребер. Однако отношение чис-
ла ячеек к ребрам меньше всего зависит от системы, если мы применяем
линейный метод.
На практике самым удобным оказывается линейный метод. Он позволяет
получить достаточно хорошие результаты при минимальных затратах вре-
мени. Для приближенного рассмотрения системы удобным оказывается ис-
пользовать точечный метод или улучшенный точечный метод. Они работают
быстрее, но результат получается менее точны. Для некоторых систем оказы-
вается удобным использовать адаптивный метод. Этот метод является наи-
более сложным и наиболее медленным, он позволяет получить наибольшее
значение отношения среднего числа ребер исходящих из каждого узла. Исхо-
дя из среднего квадратичного отклонения среднего числа исходящих ребер
из каждого узла можно считать, что результат работы этого метода сильнее
зависит от поведения системы, чем результат работы линейного метода.

Метод Ср. кол-во Ср. квадр. Время
узлов за ms отклонение работы
~ v
s
N
P
i=1
(v
i
¡~ v)
2
N
Линейный метод 15.802 8.6635 1 945 484 ms
Точечный метод 5.4305 4.7180 1 696 593 ms
Улучшенный точечный метод 2.0527 2.1462 29 589 571 ms
Адаптивный метод 0.7916 0.4803 31 858 960 ms
Метод Кол-во Ср. квадр. Время
ребер за ms отклонение работы
~ e
s
N
P
i=1
(e
i
¡~ e)
2
N
Линейный метод 132.9332 73.6511 1 945 484 ms
Точечный метод 16.0435 11.7427 1 696 593 ms
Улучшенный точечный метод 9.8190 4.9137 29 589 571 ms
Адаптивный метод 8.5444 5.2827 31 858 960 ms
Метод Ребер на Ср. квадр. Время
узел отклонение работы
g
e=v
s
N
P
i=1
(
e
i
v
i
¡
g
e=v)
2
N
Линейный метод 8.4534 0.7656 1 945 484 ms
Точечный метод 3.1109 1.2832 1 696 593 ms
Улучшенный точечный метод 7.3512 2.9207 29 589 571 ms
Адаптивный метод 10.8550 0.9591 31 858 960 ms
где N =7 количество рассмотренных двумерных систем.

Список литературы
[1] Ампилова Н.Б., Осипов А.В. Локальные бифуркации для полного
отображения Гардини. Деп. ВИНИТИ 14.06.96,N 1969-B96.
[2] Ампилова Н.Б., Петренко Е.И. Алгоритм компьютерного моделирова-
ния множества Жюлиа в случае неподвижной параболической точки.
// Электронный Журнал Дифференциальные Уравнения и Процессы
Управления (), 2,2002
[3] Осипенко Г.С. О символическом образе динамической системы // сб.
Граничные задачи, Пермь, 1983, с.101-105.
[4] Осипенко Г.С., Романовский И.В., Ампилова Н.Б., Петренко Е.И., О
вычисление спектра Морса // Проблемы Математического Анализа,
Выпуск 27, Январь 2004, с. 151-169.
[5] Осипенко Г.С., Ампилова Н.Б. Введение в символический анализ дина-
мических систем. // Изд. СПбГУ, 2005. ISBN: 5-288-03656-X
[6] Пайтген Х.O., Рихтер П.Х. Красота фракталов. // Образы комплекс-
ных динамических систем. M, 1993.
[7] Писсанецки С. Технология разреженных матриц. // М., Мир, 1988.
[8] Aronson D.G.,Chory M.A., Hall G.R. et.all Bifurcation from an invariant
circle for two-parameter families of maps of the plane: A computer-assisted
study. // Commun.Math.Phys.83,3(1982), p.303-354.
[9] Gardini L., Abraham R., Record R.J., Fournier-Prunaret D. A double
logistic map. // Int.J.Bif.and Chaos,4,1(1994), p.145-176.
[10] Henon M. A two-dimensional mapping with a strange attractor. // Comm.
Math.Phys. v.50,69-77(1976).
[11] Ikeda K. Multiple-valued stationary state and its instability of the
transmitted light by a ring cavity system // Opt. Comm. 1979, Vol.30,
p.257-261.
[12] Julia G. Sur l’iteration des fonctions rationneles. // Journal de Math.Pure
at Appl. 8:47-245. 1918

[13] Osipenko G. Numerical Explorations of the Ikeda mapping dynamics
// Electronic Journal of Differentional Equations and Control Processes
(), Vol.2, 2004
[14] Linsdrom T. Dependencies between competition and predation   and their
consequences for initial value sensitivity, // SIAM J. Appl. Math. Vol59,
pp.1468-1486
Электронный журнал.  96
