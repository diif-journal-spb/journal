dx
✻ dt
..........
. . . . . . . .
. . . . . . . .
. . . . . . .
. . . . . . .
. . . . . . . .
. . . . . . . . .
. . . . . . . . . .
. . . . . . . . . . . .. . ... . .... ... . ... . . . . . . . . . . .
. . . . . . . . . .
. . . . . . . . .
. . . . . . . .
. . . . . . .
. . . . . . . .
. . . . . . . .
................. ...........
. . . . . . . . . .
. . . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . . .
. . . . . . . . . .
. . . . . . . . . . .
. . . . . . . . . . . .
✛ . . . . . . .....
✲ . . . . . . . . . . . . . . . .
. . . . . . .
. . . . . . .
. . . . . .
. . . . . . .
. . . . . . . .
........... ..................
. . . . . . . . .
. . . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . . .
. . . . . . . . . .
. . . . . . . . . . .
. . . . . . . . . . . . .. . . . . . . . . . . ........ . . . . . . . . . . . . . .
. . . . . . . . . . .
. . . . . . . . . .
. . . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . . .
.................... .....................
. . . . . . . . . .
. . . . . . . . .
. . . . . . . .
. . . . . . . . .
. . . . . . . . .
. . . . . . . . . .
. . . . . . . . . . .
. . . . . . . . . . . .
. . . .. . . . . . . . .
. . . . . . .
. . . . . .
. . . . .
. . . . .
.............. ❄
ДИФФЕРЕНЦИАЛЬНЫЕ УРАВНЕНИЯ
И
ПРОЦЕССЫ УПРАВЛЕНИЯ
N 3, 2006
Электронный журнал,
рег. N П23275 от 07.03.97
http://www.neva.ru/journal
e-mail: jodiff@mail.ru
Моделирование динамических систем
РАЗРАБОТКА И РЕАЛИЗАЦИЯ АЛГОРИТМОВ
ПОСТРОЕНИЯ СИМВОЛИЧЕСКОГО ОБРАЗА
Е.И.Петренко
Россия, 198904, Санкт-Петербург, Петродворец, Университетский пр., 28,
Санкт-Петербургский Государственный Университет,
математико-механический факультет,
e-mail: zhene@mail.ru
Реферат.
Главной причиной интереса к изучению динамических систем послужило
их все более возрастающее значение при исследовании процессов связанных с
окружающим миром. Развитие теории динамических систем стимулировало
активную разработку алгоритмов их исследования, а бурный рост возможностей вычислительной техники позволил широко применять методы компьютерного моделирования.
Для компьютерного моделирования и исследования динамической системы мы предлагаем использовать символический образ [5], который представляет собой ориентированный граф и является дискретизацией исходной динамической системы. Он строится по заданному покрытию фазового пространства ячейками {Di}. Вершины графа соответствуют ячейкам, дуги — связям
между ними, а именно: вершины i и j соединяются дугой, если образ ячейки
Di при действии динамической системы пересекается с ячейкой Dj. Многие
задачи исследования динамических систем могут быть сведены к задачам исследования построенного ориентированного графа — символического образа.
Дифференциальные уравнения и процессы управления, N. 3, 2006
В данной работе раскрываются аспекты реализации построения символического образа. Приводится способ введения координат, представления ячеек.
Описаны четыре метода построения образа ячейки. Приводится их анализ и
сравнение производительности.
1 Определения
Пусть M — подмножество m-мерного пространства Rm. Как правило, M является замкнутым ограниченным множеством (компактом) или гладким многообразием в Rm. Пусть Z — множество целых чисел и R — множество вещественных. Динамической системой называется непрерывное отображение
Φ(x, t), где x ∈ M, t ∈ Z (или t ∈ R), такое, что
Φ : M × Z → M (или Φ : M × R → M),
Φ(x, 0) = x, (1)
Φ(Φ(x, t), s) = Φ(x, t + s), (2)
где t, s принадлежат Z (или R). Переменная t трактуется как время, а многообразие M называется фазовым пространством. Если t ∈ Z, то мы получаем динамическую систему с дискретным временем, которая называется
каскадом или дискретной динамической системой. Часто дискретные динамические системы порождены итерационными процессами вида xn+1 = f(xn)
или разностными уравнениями. В случае t ∈ R, мы имеем дело с системой с
непрерывным временем, которая называется непрерывной динамической системой. Иногда непрерывные динамические системы называются потоками.
Как правило, непрерывные динамические системы порождены автономными
системами дифференциальных уравнений x ˙ = f(x).
Мы будем рассматривать дискретные динамические системы, порожденные итерационными процессами вида xn+1 = f(xn), где f — диффеоморфизм,
D — компакт, f : D ⊂ Rm → D задает динамическую систему с дискретным
временем.
Определение 1 Степень отображения будем обозначать, и определять
следующим образом.
f 0(x) = x,
f p(x) = f p−1(f(x)), p ≥ 2,
f −p(x) = (f −1)p(x), p > 0.
(3)
Электронный журнал. http://www.neva.ru/journal 56
Дифференциальные уравнения и процессы управления, N. 3, 2006
Определение 2 Пусть x0 ∈ D. Положительной траекторией или орбитой точки x0 будем называть множество
©x0, x1 = f(x0), x2 = f(x1) = f 2(x0), . . .ª . (4)
Отрицательная орбита или траектория точки x0 — это множество
©x0, x1 = f −1(x0), x2 = f −1(x1) = f −2(x0), . . .ª . (5)
Определение 3 Если f(x0) = x0, то такая точка называется неподвижной точкой динамической системы.
Например, рассмотрим динамическую систему, заданную отображением
f : x −→ 2006x. (6)
Неподвижной точкой этой динамической системы является точка x0 = 0.
Определение 4 Если f k(x0) = x0, при k > 0 и для любого 0 < p < k
f p(x0) 6= x0, то тогда точка x0 называется k-периодической.
При численном моделировании динамических систем оказывается удобным рассматривать ε-траектории.
Определение 5 Пусть задан набор точек {x0, x1, . . .}. Тогда будем говорить, что задана ε-траектория отображения f, если
|xi+1 − f(xi)| < ε, (7)
для всех i ≥ 0
При помощи ε-траектории мы можем задать погрешность определения орбиты или погрешность вычисления значения функции. Аналогично можно определить (p, ε)-периодическую точку, ε-неподвижную точку. Например, при ε = 2, ε-траекторией системы (6) будет являться траектория
{1, 2005, 4022031, . . .}
2 Символический образ динамической системы
Пусть C = {D1, . . . , Dk} — конечное покрытие компакта D замкнутыми множествами. Множества Di будем называть ячейками и f : D → D — диффеоморфизм. По множеству D, диффеоморфизму f и множеству ячеек C можно
Электронный журнал. http://www.neva.ru/journal 57
Дифференциальные уравнения и процессы управления, N. 3, 2006
построить ориентированный граф следующим образом: каждой ячейке Di соответствует узел i графа. Между узлами i и j есть ориентированное ребро
тогда и только тогда, когда f(Di)∩Dj 6= ∅. Таким образом построенный ориентированный граф будем называть символическим образом динамической
системы, заданной диффеоморфизмом f.
Практически любую задачу исследования динамической системы можно свести к задаче исследования ориентированного графа — символического
образа [5]. Например, можно локализовать неподвижные точки, периодические траектории, оценивать спектр Морса динамической системы [4]. Между
исходной системой и символическим образом существуют следующие связи:
• траектории системы образуют пути на символическом образе;
• символический образ отражает глобальную структуру динамической системы;
• символический образ является конечным приближением динамической
системы;
• точность этого приближения зависит от максимального размера ячейки.
Введем несколько параметров символического образа. Будем обозначать:
• d — максимальный диаметр ячейки;
• r — нижняя граница символического образа. Определяется как минимальное расстояние между f(Di) и множеством ячеек разбиения, которые не пересекаются с образом ячейки Di.
Символический образ можно рассматривать как конечную дискретную
аппроксимацию динамической системы. При этом более мелкое покрытие порождает более точную аппроксимацию. С помощью процесса последовательного подразбиения элементов покрытия можно строить последовательность
символических образов и, тем самым, уточнять структурные характеристики
системы.
Описанный метод может быть успешно применен к решению следующих
задач [5]:
• локализация периодических траекторий заданного периода;
• построение периодической траектории;
Электронный журнал. http://www.neva.ru/journal 58
Дифференциальные уравнения и процессы управления, N. 3, 2006
• локализация цепно-рекуррентного множества;
• построение (положительно, отрицательно) инвариантного множества;
• построение аттрактора и его области притяжения;
• построение фильтраций и точной последовательности фильтраций;
• определение структурного графа динамической системы;
• оценка топологической энтропии;
• оценка показателей Ляпунова;
• оценка спектра Морса;
• построение изолирующих окрестностей инвариантных множеств.
Определение 6 Последовательность zk вершин графа G называется допустимым путем (или просто путем), если для любого k граф G содержит
ориентированное ребро zk → zk+1. Путь называется периодическим, если
последовательность {zk} является периодической.
Существует естественная связь между допустимыми путями на символическом образе G и ε-траекториями отображения f. Можно сказать, что допустимый путь является следом ε-траектории, причем обратное также верно.
Справедлива следующая теорема [5]:
Теорема 1 [5] Справедливы следующие утверждения для символического
образа G:
1. Если последовательность {zk} есть путь на символическом образе G
и xk ∈ Dzk, тогда последовательность {xk} есть ε-траектория гомеоморфизма f для любого ε > q + d, где q и d — наибольшие диаметры
ячеек Di и их образов f(Di) соответственно. В частности, если последовательность {zk} есть периодический путь на символическом образе, то последовательность {xk} есть ε-периодическая траектория.
2. Если последовательность {zk} есть путь на символическом образе G,
тогда существует последовательность {xk}, xk ∈ M(zk), которая
есть ε-траектория гомеоморфизма f для любого ε > d.
Электронный журнал. http://www.neva.ru/journal 59
Дифференциальные уравнения и процессы управления, N. 3, 2006
3. Пусть последовательность {xk} есть ε-траектория гомеоморфизма
f, ε < r и xk ∈ Dzk, где r нижняя граница символического образа.
Тогда последовательность {zk} есть допустимый путь на символическом образе G. В частности, если последовательность {xk} есть
ε-периодическая траектория, то последовательность {zk} есть периодический путь на символическом образе G.
3 Анализ символического образа
При исследовании динамических систем наибольший интерес представляют неподвижные точки, периодические орбиты, а также цепно-рекуррентные
множества.
Определение 7 Точка x называется цепно-рекуррентной, если для любого ε > 0 существует периодическая ε-траектория, проходящая через
x. Цепно-рекуррентным множеством называется множество всех цепнорекуррентных точек.
Цепно-рекуррентное множество инвариантно, замкнуто и содержит возвращающиеся траектории всех типов [5]. В частности цепно-рекуррентное
множество содержит периодические орбиты.
Пусть Q — цепно-рекуррентное множество. Q(ε) — множество точек ε-
траекторий. Тогда из определения цепно-рекуррентного множества и множества ε-траекторий следует Q ⊆ Q(ε) и Q(ε1) ⊆ Q(ε2), при ε1 ≤ ε2.
Определение 8 Вершина символического образа называется возвратной,
если существует периодический путь, проходящий через нее. Две вершины символического образа называются эквивалентными, если существует
периодический путь, проходящий через них.
Согласно определению, множество возвратных вершин разбивается на
несколько классов эквивалентности. Ясно, что каждый периодический путь
ξ находится в некотором классе, который однозначно определяется по ξ.
Рассмотрим те ячейки Di, для которых вершина i является возвратной.
Такое множество зависит от выбранного покрытия C и от наибольшего диаметра ячейки d. Поскольку зависимость от d для нас наиболее важно, обозначим
P (d) = {x ∈ Di : i — возвратные}.
T (d) = {x ∈ Dk : k — невозвратные}.
(8)
Электронный журнал. http://www.neva.ru/journal 60
Дифференциальные уравнения и процессы управления, N. 3, 2006
Теорема 2 [5] Справедливы следующие утверждения:
1. Множество P(d) является замкнутой окрестностью цепно-рекуррентного множества. Кроме того, P(d) состоит из
ε-периодических точек для любого ε > q + d, т. е.
P(d) ⊂ Q(ε), ε > q + d. (9)
2. Цепно-рекуррентное множество Q совпадает с пересечением множеств P(d) для всех положительных d:
Q = \
d>0
P(d). (10)
3. Точки из множества T(d) не являются цепно-рекуррентными. Кроме того, если ε < r, то не существует ε-периодической траектории,
проходящей через точку x множества T(d), т.е.
Q(ε) \ T(d) = ∅, ε < r. (11)
Множество T(d) является замкнутым по построению и пара P(d), T(d)
образует замкнутое покрытие D. Следовательно, множество P(d)\T(d) является окрестностью цепно-рекуррентного множества Q. Из теоремы 2 следует
включение:
Q ⊂ Q(ε1) ⊂ D \ T(d) = P(d) \ T(d) ⊂ P(d) ⊂ Q(ε2), (12)
где ε1 < r < d < q + d < ε2.
Отметим, что множества P(d) не являются монотонными по d, т.е. из
условия d1 > d2 не обязательно следует, что множество P(d1) содержит P(d2).
Однако, если C2 является подразбиением покрытия C1, то P(d2) ⊂ P(d1). Это
свойство лежит в основе следующего алгоритма.
3.1 Алгоритм локализации цепно-рекуррентного множества
1. Строим исходное покрытие C компакта D. Находим символический образ G отображения f. Заметим, что ячейки исходного покрытия могут
иметь произвольный диаметр d0.
Электронный журнал. http://www.neva.ru/journal 61
Дифференциальные уравнения и процессы управления, N. 3, 2006
2. Выделяем на графе G возвратные вершины {ik}. Если множество таких вершин пустое, значит локализуемое цепно-рекуррентное множество является пустым и процесс его локализации прекращается. Иначе, используя их, находим зaмкнутую окрестность P = {x ∈ Dik :
ik — возвратные} цепно-рекуррентного множества Q.
3. Разбиваем ячейки {Dik}, соответствующие возвратным вершинам символического образа и, таким образом, определяем новое покрытие.
4. Строим символический образ G для нового покрытия.
5. Переходим ко второму пункту, если размеры ячеек построенного символического образа достаточно велики.
Повторяя процесс последовательного измельчения покрытия, мы получаем последовательность окрестностей P0, P1, P2, . . . цепно-рекуррентного множества Q и последовательность наибольших диаметров d0, d1, d2, . . . ячеек,
соответствующих возвратным вершинам символического образа для покрытия Ck. Следующая теорема обосновывает описанный алгоритм локализации
множества Q.
Теорема 3 [5] Последовательность множеств P0, P1, P2, . . . обладает следующими свойствами:
1. Окрестности Pk вложены друг в друга, т. е.
P0
⊃ P1 ⊃ P2 ⊃ . . . ⊃ Q, (13)
2. Если наибольшие диаметры dk → 0 при k → ∞, то
lim
k→∞
Pk
= \
k
Pk
= Q. (14)
Таким образом, описанный алгоритм дает монотонно убывающую последовательность окрестностей, сходящуюся к цепно-рекуррентному множеству.
Пусть G(V, E) — ориентированный граф, V — множество вершин, E —
множество ребер.
Определение 9 Вершины v1 и v2 сильно связаны в G, если существует
путь из v1 в v2 и из v2 в v1. Если все вершины в ориентированном графе
сильно связаны, то G называется сильно связным.
Электронный журнал. http://www.neva.ru/journal 62
Дифференциальные уравнения и процессы управления, N. 3, 2006
Как было показано в [5], задача о локализации цепно-рекуррентного множества заданной динамической системы сводится к исследованию соответствующего символического образа и выделению на нем классов возвратных
вершин. Из определения возвратной вершины следует, что компоненте сильной связности соответствует объединение классов возвратных вершин. Таким образом, выделение таких классов на графе эквивалентно нахождению
компонент сильной связности. Для этого использован алгоритм Тарьяна [7],
который обладает достаточно хорошей оценкой сложности: O(n + m), где n
— количество узлов, m — количество ребер.
3.2 Алгоритм выделения компонент сильной связности
Алгоритм основан на обходе графа в глубину и использует два стека “стек” и
“маршрут”. Стек “маршрут” содержит путь от начальной вершины до текущей. Каждая новая исследуемая вершина опускается в стек “маршрут”, а при
возвратах — извлекается. В “стек” добавляются все просмотренные вершины.
Все элементы найденной компоненты сильной связности удаляются после ее
окончательного формирования.
Заведем счетчик вершин с некоторым начальным значением и припишем
к каждой вершине 2 числовых параметра: “номер” и “связка”. Поле “номер”
определяется простой последовательной нумерацией вершин по мере их обхода алгоритмом. Поле “связка” для произвольной вершины хранит номер
другой вершины, которая была нумерована раньше. Если рассматриваемая
вершина является корнем дерева поиска компоненты сильной связности, то
значения полей “номер” и “связка” совпадут. Заметим, что значение поля
“связка” всегда меньше или равно значению поля “номер”. Схему работы алгоритма можно представить следующим образом.
• Шаг 1. Выбрать произвольную нерассмотренную вершину v, т.е. вершину для которой значение поля “номер” не было инициализировано.
• Шаг 2.
– Положить вершину v в стеки “стек” и “маршрут”.
– Увеличить счетчик вершин на 1.
– Присвоить полям “номер” и “связка” этой вершины значение счетчика.
Электронный журнал. http://www.neva.ru/journal 63
Дифференциальные уравнения и процессы управления, N. 3, 2006
• Шаг 3. Выбрать некоторое нерассмотренное ребро, выходящее из вершины v и рассмотреть вершину (w), в которую оно ведет.
– Если ребро идет в не рассмотренную ранее вершину, положить v = w
и перейти на Шаг 2.
– Если ребро идет в уже рассмотренную вершину, перейти на Шаг 4.
– Если вершина v не имеет неисследованных выходов и значение поля
“связка” меньше значения поля “номер”, перейти на Шаг 5.
– Если вершина v не имеет неисследованных выходов и значение поля
“связка” равно значению поля “номер”, перейти на Шаг 6.
• Шаг 4.
– Если значение поля “номер” вершины w меньше значения поля “номер” вершины v и w находится в стеке “стек”, тогда положить значение поля “связка” вершины v равным минимуму из значений полей
“связка” вершин v и w.
– Перейти на Шаг 3.
• Шаг 5.
– Извлечь вершину v из стека “маршрут” и рассмотреть вершину, которая оказалась на вершине стека (u).
– Положить значение поля “связка” вершины u равным минимуму из
значений полей “связка” вершин v и u. Положить v равным u и перейти на Шаг 3.
• Шаг 6.
– Взять все вершины с вершины стека “стек” до вершины v включительно и поместить их в новую компоненту сильной связности.
Больше эта компонента изменяться не будет.
– Извлечь вершину v из стека “маршрут”. Если в итоге “маршрут”
окажется пустым, перейти на Шаг 1, иначе положить v равным
вершине на вершине “маршрута” и перейти на Шаг 3.
Заметим, что мы можем получить компоненту сильной связности, состоящую из одной вершины, при этом у нее нет ребра, ведущего в нее саму.
Для того чтобы не рассматривать такие “компоненты сильной связности”,
было добавлено дополнительное условие на шаге формирования компоненты
Электронный журнал. http://www.neva.ru/journal 64
Дифференциальные уравнения и процессы управления, N. 3, 2006
сильной связности (Шаг 6). А именно, если на верхушке стека “маршрут”
лежит текущая вершина v, то она единственная в своей компоненте. Согласно
описанию алгоритма она становится компонентой сильной связности. Если у
этой вершины есть ребро идущее в неё, то это компонента сильной связности,
иначе это просто проходящая вершина.
На Шаге 3 алгоритма требуется находить необработанные ребра. Для
этого в каждой вершине графа будем хранить индекс последнего обработанного ребра.
На Шаге 4 требуется проверять, находится ли данная вершина в стеке
“стек”. Для ускорения этой проверки введем в каждой вершине флаг. Флаг
будет установлен, если вершина находится в стеке. Для того, чтобы выяснить,
содержится ли вершина в стеке будет достаточно посмотреть на значение
этого флага.
На Шаге 6 для формирования компоненты сильной связности будем создавать новую структуру данных графа для сохранения выделенных вершин.
Если для дальнейшего исследования требуются ребра, то после завершения
работы алгоритма локализации компонент сильной связности, можно восстановить ребра в выделенной компоненте сильной связности.
Обозначим G исходный граф. Пусть для каждой компоненты связности
графа Gi задан набор узлов Ni, входящих в нее. Тогда для построения графов
компонент сильной связности GNi графа G следует выполнить следующий
алгоритм:
• Для каждой вершины v компоненты сильной связности Ni найти соответствующую ей вершину v0 в исходном графе G.
• Для всех ребер вида v0 → w0, w0 вершина G, если вершина w0 ∈ Ni,
добавить это ребро в граф GNi.
После завершения процесса локализации компонент сильной связности,
мы получаем набор из графов-компонент сильной связности исходного графа. Каждый такой граф соответствует цепно-рекуррентному множеству исходной системы [5]. Теперь исходный граф можно удалить из памяти.
4 Представление ячейки
Ячейка представляется координатами ее вершин и центра. В реализации алгоритма удобно рассматривать одинаковые ячейки, тогда информацию о разЭлектронный журнал. http://www.neva.ru/journal 65
Дифференциальные уравнения и процессы управления, N. 3, 2006
мерах ячейки можно хранить отдельно и всего один раз. Каждая ячейка в
таком случае представляется точкой ее “верхнего левого угла” единственным
образом.
Для избежания ошибок при работе с плавающей арифметикой на компьютере, рассматривается целочисленная система координат, за единицу длины,
в которой принимается размер ячейки.
Введем обозначение [a, b] = [a1, b1] × · · · × [am, bm].
Возьмем a, b ∈ Rm, такие, что a 6= b, тогда
D = [a, b] ⊂ Rm. (15)
Зафиксируем m положительных чисел p1, p2, . . . , pm и разобьем каждый
отрезок [ai, bi] на pi равных частей:
di = bi−ai
pi
,
W j
i = [ai + (j − 1)di, ai + jdi],
[ai, bi] = Wi1 ∪ Wi2 ∪ · · · ∪ Wipi,
W j1
i ∩ Wij2 = ∅, j1 6= j2.
(16)
Определим множество всех ячеек разбиения.
W = {W1 j1 × W2 j2 × · · · × Wm jm|1 ≤ jk ≤ pk, 1 ≤ k ≤ m}. (17)
Элемент множества W будем называть ячейкой. Целочисленной координатой ячейки c ∈ W будет набор значений (j1, j2, . . . , jm), с которыми эта
ячейка входит в множество W.
Пусть a, b ∈ Rk, (pi)k i=1 — набор положительных чисел. Будем обозначать
через W ([a, b], p) множество ячеек, построенное описанным выше способом.
Использование представления ячеек в целочисленной системе координат
позволяет уменьшить объем памяти, требуемой для хранения ячейки. Для
вычисления координат вершин ячейки в исходной системе координат проводится линейное преобразование координат.
При построении последовательности символических образов ячейки, соответствующие вершинам символического образа разбиваются на равное количество частей. Удобно задавать количество частей по каждой координате
отдельно. Пусть задан вектор разбиения ячеек r = (r1, r2, . . . , rm), ri > 0.
Тогда каждой ячейке c с координатами (x1, x2, . . . , xm) соответствуем множество ячеек (x1r1 + j1, x2r2 + j2, . . . , xmrm + jm), где ji ∈ [0, ri) ∩ Z.
Электронный журнал. http://www.neva.ru/journal 66
Дифференциальные уравнения и процессы управления, N. 3, 2006
5 Структура данных символического образа
Процесс построения символического образа представляет собой последовательную обработку ячеек. Для экономии памяти оказывается удобным хранить в графе только вершины, соответствующие обработанным ячейкам.
Для того чтобы обеспечить быстрое построение символического образа требуется, чтобы структура данных, представляющая ориентированный
граф, была устроена так, чтобы оптимально выполнялись следующие операции:
• быстрый поиск вершин. При добавлении новой вершины, нужно проверить, не была ли эта вершина добавлена в граф раньше. И если была,
то нужно просто вернуть указатель на нее и не производить никаких
дополнительных действий;
• быстрый поиск ребер. При добавлении нового ребра, следует проверить,
не было ли добавлено это ребро раньше.
• оптимальное использование памяти. Построенная нами структура данных должна работать с большими графами.
Граф представляется с помощью списка инциденции, т.е. списка вершин,
каждая из которых содержит список исходящих из нее ребер. Для ускорения поиска списки ребер каждой вершины и список узлов хешируются при
помощи хэш-таблиц.
6 Методы построения образа ячейки
Построение символического образа основано на построении образа ячейки.
На рис. 1 показан образ ячейки (заштрихован темным цветом). Понятно, что
в зависимости от выбора ячеек покрытия, попадающих в этот образ, мы будем
получать различные графы.
6.1 Линейный метод
В этом методе мы оцениваем возможные значения функции на заданной ячейке. Для этого производятся следующие действия (рис. 2):
• берем ячейку разбиения Di;
Электронный журнал. http://www.neva.ru/journal 67
Дифференциальные уравнения и процессы управления, N. 3, 2006
Рис. 1: Разбиение множества D, образ ячейки.
• вычисляем значения функции системы f на вершинах ячейки Di;
• строим минимальный прямоугольник E, ориентированный по осям координат, который содержит образы вершин ячейки Di;
• образом ячейки будем считать множество ячеек покрытия, которые пересекаются с построенным прямоугольником E.
Для ускорения работы этого метода значения функции системы в вершинах ячейки вычисляются с точностью до членов первого порядка при разложении этой функции в ряд Тейлора в окрестности центра ячейки x0, т.е.
f ˜(x) = f(x0) + Df(x0)(x − x0), (18)
где x — вершина ячейки.
Чтобы увеличить вероятность того, что построенный этим методом образ ячейки содержит все точки образа ячейки, можно ввести коэффициент
расширения полученного прямоугольника.
6.2 Точечный метод
Пусть дано число n ∈ Nm, т.е. n = (n1, n2, . . . , nm), где ni ∈ N. Тогда точечный метод с дроблением n действует следующим образом. В ячейке равномерно берем ni точек по i-й координате. Образом ячейки будем называть
Электронный журнал. http://www.neva.ru/journal 68
Дифференциальные уравнения и процессы управления, N. 3, 2006
Рис. 2: Построения образа ячейки. Линейный метод.
набор ячеек, в которые попали образы равномерно брошенных точек (рис. 3).
Результат и время работы метода зависит от выбора значения вектора n.
Рис. 3: Построение образа ячейки при N = (2, 2). Точечный метод.
Электронный журнал. http://www.neva.ru/journal 69
Дифференциальные уравнения и процессы управления, N. 3, 2006
6.3 Улучшенный точечный метод
Пусть даны число n ∈ Nm и b ∈ [0, 1]m, тогда улучшенный точечный метод
с дроблением n и наложением b действует аналогично точечному методу с
дроблением n. Образу равномерно брошенной точки x будем сопоставлять
ячейку, которая содержит образ f(x) и все ячейки, которые находятся ближе
чем bidi
2 от этой точки, где i номер оси, в направлении которой идет отрезокграница ячейки.
Если образ некоторой равномерно брошенной точки попадет на светлосерую область ячейки (рис. 4), то тогда добавляем к результату не только
эту ячейку, но и соседнюю, как показано на рис. 4. Если точка лежит близко
от нескольких границ ячейки, то следует добавлять несколько ячеек (рис. 4).
Области ячейки Точка на краю ячейки
Точка, близкая к двум границам
Рис. 4: Точки на краю ячейки
Для поиска соседних ячеек был разработан специальный алгоритм, который довольно эффективно вычисляет целочисленные координаты всех ячеек,
которые должны быть добавлены.
6.4 Адаптивный метод
Недостаток описанных выше методов построения образа ячейки заключается
в том, что эти методы вычисляют функцию в заранее определенных точках.
Предлагается новый метод построения образа ячейки, который будет вычислять значение функции только в тех точках, выбранных в процессе работы
алгоритма, в которых это действительно необходимо, при этом количество
Электронный журнал. http://www.neva.ru/journal 70
Дифференциальные уравнения и процессы управления, N. 3, 2006
таких точек, по которым строится образ ячейки тоже будет зависеть от поведения системы на данной ячейке. Такой способ построения образа ячейки
будем называть адаптивным методом.
Адаптивный метод работает по принципу точечного метода (см. 6.2).
Единственное отличие его заключено в том, что точки, в которых вычисляются значения функции берутся не равномерно, как раньше, а исходя из
поведения системы.
Определение 10 Пусть есть множество точек P ⊆ D и рефлексивное
симметричное отношение ψ на множестве P . Будем называть такое отношение ψ отношением соседства. Пусть задана функция правой части
системы f = (f1, f2, . . . , fm). Фиксируем ε = (εi)m i=1, εi > 0. Тогда будем называть множество P ε-множеством для функции f и отношения ψ, если
для любых двух соседних (ψ(x, y)) точек x, y ∈ P выполнено соотношение
|fi(x) − fi(y)| ≤ εi. (19)
Будем обозначать такое множество через Pf,ψ ε .
Определение 11 Пусть задан набор m положительных чисел ε = (εi)m i=1.
Тогда ε-окрестностью точки x = (x1, x2, . . . , xm) ∈ Rm будем называть
множество
[x1 − ε1, x1 + ε1] × [x2 − ε2, x2 + ε2] × · · · × [xm − εm, xm + εm] ⊂ Rm. (20)
Пусть задано множество Pf,ψ ε , и ячейка Dj, все вершины которой принадлежат множеству P . Тогда образ ячейки будет состоять из ε-окрестностей
образов точек, которые лежат в P ∩ Dj. При этом если элементы ε достаточно малы, т.е.
εi <
di
2
, (21)
то можно искать ячейки по принципу, описанному в улучшенном точечном
методе (см. 6.3).
Введенное отношение соседства ψ можно представить как неориентированный граф, где вершины соответствуют точкам множества P , а ψ(x, y)
эквивалентно существованию ребра между вершинами x и y или совпадению
этих вершин x = y.
Электронный журнал. http://www.neva.ru/journal 71
Дифференциальные уравнения и процессы управления, N. 3, 2006
6.5 Алгоритм построения графа для Pf,ψ ε
Предположим, задано начальное множество точек и граф, определяющий
соотношение соседства для точек множества. Зафиксируем ε > 0.
Определение 12 Вектором длины ребра r между узлами графа x и y будем называть вектор пространства Rm, компонентами которого будут
расстояния между проекциями образов точек x и y под действием функции системы f.
length(r)i = |fi(x) − fi(y)|. (22)
На множестве векторов длин можно ввести отношение порядка. Будем
говорить, что вектор a больше вектора b, если это соотношение выполнено
покомпонентно.
Определение 13 Обозначим через E(n) множество всех вершин, которые
соединены одним ребром с вершиной n.
Для того, чтобы заданное множество удовлетворяло требованиям определения, нужно проверить, что все ребра не длиннее ε. Представим все ребра
исходного графа в виде упорядоченного по убыванию длины ребра списка L.
В качестве длины будем брать сумму модулей компонент вектора длин.
Пока список L не пуст, возьмем ребро r из начала списка и удалим его
из списка. Если ребро r между точками x и y такое, что вектор его длины
больше ε, выполним следующее:
1. Добавим в граф разбиения новую вершину p с координатами (xi+ 2 yi)m i=1.
2. Удалим ребро r из графа.
3. Добавим ребра (x, p) и (y, p) в граф и в список L, с сохранением порядка.
4. Добавим ребра к вершинам, принадлежащим E(x)∩E(y) в граф и список
L с сохранением порядка.
Основная сложность в данном алгоритме возникает на шаге 4. Нужно
определить, какие ребра добавлять к новому узлу графа, т.е. следует определить расширение отношения ψ на новую точку p. Следует наиболее полно
расширить отношение ψ, чтобы учесть все расстояния от новой точки p до
остальных точек графа.
Электронный журнал. http://www.neva.ru/journal 72
Дифференциальные уравнения и процессы управления, N. 3, 2006
На практике возникают ситуации, когда описанный процесс работает
очень медленно из-за большого количества добавлений новых вершин в граф.
В этом случае мы вводим ограничение на количество вершин в графе разбиения. А именно: множество ребер графа делится на два класса: ребра с
известной длиной и ребра, длина которых не определена. Алгоритм построения образа ячейки по графу разбиения работает аналогично приведенному
выше, однако, при построении ε-окрестности для вершины этого графа берем ε равным длине наибольшего ребра. Можно приписать каждому ребру
его длину и хранить упорядоченный список ребер для каждой вершины. В
вершинах можно хранить значение образа точки. Введенные оптимизации
позволили увеличить скорость работы алгоритма.
Пример работы алгоритма для 2-х мерного случая
Рассмотрим граф для множества P, которое состоит из 4-х точек (рис. 5).
Предположим мы проверяем длину выделенного жирно ребра. Тогда, согласно алгоритму, следует ввести новую точку и некоторое число новых ребер.
Пометим двойной линией ребра, которые имеют одну общую вершину с
рассматриваемым (выделенным жирно) ребром. Тогда, согласно алгоритму,
следует добавить новые ребра только к тем вершинам, которые соединены
ребрами с двумя вершинами рассматриваемого ребра (рис. 5).
Исходный граф Дробление ребра
Рис. 5: Разбиение длинного ребра.
Электронный журнал. http://www.neva.ru/journal 73
Дифференциальные уравнения и процессы управления, N. 3, 2006
Выделим такие вершины кругом. Тогда появляются два новых ребра, которые нарисованы серым цветом. Эти ребра будут добавлены в конец списка
L. На следующих шагах алгоритм проверит длины оставшихся ребер.
6.6 Начальное разбиение ячейки
Вершины графа разбиения соответствуют точкам фазового пространства исследуемой системы. Результат и скорость работы адаптивного метода зависит от выбора начального разбиения ячейки. Мы предлагаем следующие графы разбиения ячейки для одномерного, двумерного и трехмерного случаев
(рис. 6):
• для одномерного случая достаточно взять взять граф с одним ребром и
двумя вершинами, которые соответствуют границам одномерной ячейки;
• в двумерном случае будем рассматривать граф из 5 вершин — центр
ячейки и ее четыре вершины и 8 ребер, которые связывают соседние
вершины;
• в трехмерном случае мы рассматриваем все вершины ячейки, все центры
ее граней и центр ячейки. Соединяем ребром соседние вершины.
1-мерная ячейка
2-мерная ячейка 3-мерная ячейка
Рис. 6: Графы начального разбиения
Электронный журнал. http://www.neva.ru/journal 74
Дифференциальные уравнения и процессы управления, N. 3, 2006
7 Примеры
В этой части приведены примеры построения цепно-рекуррентных множеств
динамических систем с помощью построения последовательности символических образов с использованием разных методов построения образа ячейки.
Приведены рисунки полученных цепно-рекуррентных множеств и таблицы
сравнений работы различных методов построения образа ячейки. В таблице
также показано время работы алгоритма и количество компонент сильной
связности графа.
Количество шагов процесса подразбиения символического образа определяется экспериментально для каждой системы. Следующий шаг построения
символического образа проводится, если для этого хватит оперативной памяти компьютера.
На каждом шаге построения символического образа будем разбивать исходную ячейку на 2 части по каждой координате. Точечный метод будет строить образ ячейки по 2 точкам по каждой координате, улучшенный точечный
метод использует наложение, равное 10% от размера ячейки. Ограничение
на количество точек для построения образа ячейки адаптивным методом не
устанавливается.
Все эксперименты были проведены на компьютере Intel Pentium 4 3Ghz,
1Gb оперативной памяти. Операционная система Microsoft Windows XP SP2.
7.1 Отображение Хенона [10]
Рассмотрим систему:
Ã x y ! → Ã 1 − ax x2 + by ! , (23)
при a = 1.4, b = 0.3.
Известно [5], что при заданных параметрах у этой системы существует инвариантное множество в области [−1.5, 1.5] × [−10 3 , 10 3 ]. Возьмем D =
[−10, 10] × [−10, 10]. Проведем 13 шагов построения символического образа.
Сведем результаты вычислений в таблицу. На каждом шаге будем выполнять
построение символического образа и его анализ, согласно алгоритму, приведенному в 3.1, т.е. выделение цепно-рекуррентного множества с помощью
Электронный журнал. http://www.neva.ru/journal 75
Дифференциальные уравнения и процессы управления, N. 3, 2006
алгоритма выделения компонент сильной связности.
Метод Кол-во Кол-во Время Кол-во
узлов ребер работы компонент
Линейный метод 572 435 5 509 083 24 047 ms 2
Точечный метод 298 397 853 915 40 656 ms 5
Улучшенный точечный метод 505 152 3 877 289 465 563 ms 3
Адаптивный метод 507 637 5 171 045 464 844 ms 2
Каждым методом было сделано по 13 шагов. Начальное разбиение — по
10 ячеек на каждую координату. На каждом шаге ячейка разбивается на 2
части по каждой координате.
Приведем иллюстрации построенного цепно-рекуррентного множества.
Построенные цепно-рекуррентрые множества получились практически одинаковые, отличие видно только по количеству узлов. Самый маленький граф
получается при использовании точечного метода.
Электронный журнал. http://www.neva.ru/journal 76
Дифференциальные уравнения и процессы управления, N. 3, 2006
Линейный метод Адаптивный метод
Точечный метод Улучшенный точечный метод
Рис. 7: Результаты вычислений. Отображение Хенона.
Электронный журнал. http://www.neva.ru/journal 77
Дифференциальные уравнения и процессы управления, N. 3, 2006
7.2 Отображение Икеда [11]
Отображение имеет вид:
τ(x, y) = C1 − C3
1 + x2 + y2 (24)
Ã x y ! → Ã d − C C2 2((x xcos sin τ τ((x, y x, y) + ) −y ycos sin τ τ((x, y x, y)) )) ! , (25)
где d = 2, C1 = 0.4, C2 = 0.9, C3 = 6.
Пусть D = [−10,10]×[−10,10]. Отображение Икеда возникает при моделировании оптических носителей (кристаллов) информации. Оно было рассмотрено и исследовано в [11, 13]; было показано, что при заданных параметрах это отображение имеет цепно-рекуррентное множество.
Метод Кол-во Кол-во Время Кол-во Кол-во
узлов ребер работы компонент шагов
Линейный метод 3 117 236 25 988 943 172 484 ms 2 11
Точечный метод 1 732 774 4 378 370 112 359 ms 4 11
Улучшенный точечный метод 2 949 314 21 666 315 512 969 ms 2 11
Адаптивный метод 1 017 624 11 740 358 640 609 ms 2 10
Результаты вычисления символического образа отображения Икеда приведены на рис. 8. Видно, что результат, полученный точечным методом
немного более “дырявый”, по сравнению с результатами, полученными другими методами. Согласно [13], наиболее хорошие результаты дали линейный
и адаптивный методы.
Электронный журнал. http://www.neva.ru/journal 78
Дифференциальные уравнения и процессы управления, N. 3, 2006
Линейный метод Адаптивный метод
Точечный метод Улучшенный точечный метод
Рис. 8: Результаты вычислений. Отображение Икеда.
7.3 Множество Жюлиа для r = −0.12 + 0.74i [6, 12]
В исследованиях Пайтгена и Рихтера [6] были приведены алгоритмы и результаты построения множеств Жюлиа и наполненных множеств Жюлиа для
комплексного отображения
z → z2 + r. (26)
Электронный журнал. http://www.neva.ru/journal 79
Дифференциальные уравнения и процессы управления, N. 3, 2006
Система, эквивалентная (26), [12]:
Ã x y ! → Ã x22− xyy2 + + im re ! , (27)
где re = −0.12, im = 0.74
Описанные выше методы построения инвариантных множеств с помощью
символического образа дали похожие результаты.
Метод Кол-во Кол-во Время Кол-во Кол-во
узлов ребер работы компонент шагов
Линейный метод 2 412 630 20 337 231 1 174 000 ms 4 13
Точечный метод 92 140 1 406 ms 15 15
Улучшенный точечный метод 2 164 382 14 282 466 844 844 ms 6 13
Адаптивный метод 1 068 206 12 145 512 2 058 797 ms 2 12
На этом примере точечный метод показал очень странный результат. Это
можно объяснить тем, что количество точек, взятых для построения образа
ячейки слишком мало. Изображения построенных цепно-рекуррентых множеств приведены на рис. 9.
Электронный журнал. http://www.neva.ru/journal 80
Дифференциальные уравнения и процессы управления, N. 3, 2006
Линейный метод Адаптивный метод
Точечный метод Улучшенный точечный метод
Рис. 9: Результаты вычислений. Отображение z → z2 + r, r = −0.14 + 0.74i.
7.4 Множество Жюлиа в случае параболической неподвижной
точки [6]
Рассмотрим отображение на комплексной плоскости
f : z → z2 + exp2πi 20 1 z. (28)
Электронный журнал. http://www.neva.ru/journal 81
Дифференциальные уравнения и процессы управления, N. 3, 2006
Для k-периодической точки z0 ее орбита представляет собой множество
точек {z0, f(z0), f 2(z0), . . . , f k−1(z0)} ( цикл периода k).
Определение 14 Пусть z0 периодическая точка периода n. Собственным
значением точки x0 для отображения f называется комплексное число
λ = (f n)0(z0)
По правилам дифференцирования сложной функции, мы получаем, что
это число одинаково для любой точки цикла.
Периодическая или неподвижная точка z0 называется:
• притягивающей, если 0 < |λ| < 1,
• отталкивающей, если |λ| > 1,
• сверхпритягивающей, если λ = 0,
• нейтральной, если |λ| = 1.
Нейтральные точки в свою очередь тоже можно классифицировать.
Пусть |λ| = 1 и λ — собственное значение точки z0 для отображения f, тогда
его можно переписать в виде
λ = e2πiα, α ∈ [0,1]. (29)
Неподвижная точка z0 называется параболической, если α ∈ Q.
При заданных параметрах, для исследуемой системы z0 = 0 является неподвижной параболической точкой. Обозначим λ — собственное число
функции f в точке z0. Поскольку λ20 = 1, множество Жюлиа подходит к
точке z0 = 0 с 20 различных направлений (между 20 лепестками). Основная проблема моделирования поведения этой системы заключается в потере
точности компьютерных вычислений, в результате чего возникают лишние
периодические или неподвижные точки.
В этом примере техника символического образа для построения цепнореккурентных множеств позволяет построить лишь наполненные множества
Жюлиа, т.е. вышеописанная проблема остается.
Отметим, что в работах [2, 6] были приведены методы решения этой задачи.
Проведем 10 шагов построения символического образа (см. 3.1). Полученные результаты сведем в таблицу:
Электронный журнал. http://www.neva.ru/journal 82
Дифференциальные уравнения и процессы управления, N. 3, 2006
Метод Кол-во Кол-во Время Кол-во Кол-во
узлов ребер работы компонент шагов
Линейный метод 2 737 711 24 507 847 182 922 ms 2 10
Точечный метод 2 684 661 14 941 697 1 145 969 ms 1 10
Улучшенный точечный метод 2 801 326 32 547 551 4 795 844 ms 1 10
Адаптивный метод 2 814 564 35 579 838 9 043 422 ms 1 10
Все методы дали визуально схожие результаты (рис. 10). Полученные
нами результаты согласуются с результатами, полученными в [2, 6].
Электронный журнал. http://www.neva.ru/journal 83
Дифференциальные уравнения и процессы управления, N. 3, 2006
Линейный метод Адаптивный метод
Точечный метод Улучшенный точечный метод
Рис. 10: Результаты вычислений в случае параболической неподвижной точки.
7.5 Двойное логистическое отображение [9]
Рассмотрим динамическую систему
Ã x y ! → Ã (1 (1 − − a a))x y + + abx aby(1 (1 − − y x)) ! , (30)
где a = 0.38, b = 4.11.
Электронный журнал. http://www.neva.ru/journal 84
Дифференциальные уравнения и процессы управления, N. 3, 2006
Данная система, была исследована в работах ([1], [9]). Были получены
оценки на область притяжения к бесконечно удаленной точке, в частности
было показано, что в этой области лежит внешность круга
(x − r)2 + (y − r)2 ≤ 2r2, (31)
где r = 1−a+ab
2ab .
При заданных значениях параметров инвариантным множеством является объединением инвариантных кривых бифуркации Хопфа в окрестности
двух неподвижных точек, расположенных симметрично относительно главной диагонали.
Проведем построение символического образа и сравним полученные численные результаты.
Метод Кол-во Кол-во Время Кол-во Кол-во
узлов ребер работы компонент шагов
Линейный метод 393 478 2 715 484 16 875 ms 15 13
Точечный метод 258 874 1 108 540 57 188 ms 13 13
Улучшенный точечный метод 492 115 4 868 381 320 266 ms 13 13
Адаптивный метод 503 102 5 275 606 517 078 ms 13 13
Цепно-рекуррентые множества показаны на рис. 11. На этой системе различия методов построения образа ячейки не видны. Однако по численным
показателям отличия все же есть.
Электронный журнал. http://www.neva.ru/journal 85
Дифференциальные уравнения и процессы управления, N. 3, 2006
Линейный метод Адаптивный метод
Точечный метод Улучшенный точечный метод
Рис. 11: Двойное логистическое отображение. a = 0.38, b = 4.11.
7.6 Отображение с задержкой [8]
Рассмотрим динамическую систему с задержкой.
Ã x y ! → Ã ay(1y− x) ! . (32)
Электронный журнал. http://www.neva.ru/journal 86
Дифференциальные уравнения и процессы управления, N. 3, 2006
Система обладает двумя неподвижными точками O1 = (0, 0) и O2 =
(1 − a 1, 1 − a 1). Начало координат является седловой точкой при a > 1. Собственные числа в точке O1 равны 0 и a. Точка O2 является фокусом при a > 5 4.
Собственные числа в этой точке равны λ1,2 = 1 2(1 ± √5 − 4a). Фокус устойчив при a < 2, а при a > 2 фокус теряет устойчивость через бифуркацию
Хопфа. Возникающая при этой бифуркации инвариантная кривая разрушается при a = 2.27 с появлением странного аттрактора [5]. Кроме того, при
этом значении параметра неустойчивая сепаратриса седловой точки касается
устойчивой, лежащей на ости OX.
Проведем построение цепно-рекуррентного множества при a = 2.21
(рис. 12). Разобьем каждый шаг построения символического образа с меньшим разбиением на два этапа. На первом этапе построения будем делить
ячейки только по первой координате на две равные части. На втором —
только вторые координаты. Каждый этап представляет собой отдельный шаг
построения уточненного символического образа. Такой способ позволяет получить символической образ с более мелким разбиением и затратить на это
меньше оперативной памяти, чем аналогичный процесс построения образа
ячейки, на каждом шагу которого деление проводилось сразу по нескольким
координатам.
Метод Кол-во Кол-во Время Кол-во Кол-во
узлов ребер работы компонент шагов
Линейный метод 1 489 037 12 863 578 357 859 ms 5 17
Точечный метод 378 579 954 108 311 875 ms 7 17
Улучшенный точечный метод 1 244 114 8 723 417 13 201 563 ms 6 17
Адаптивный метод 1 390 661 13 941 695 18 473 141 ms 6 17
Электронный журнал. http://www.neva.ru/journal 87
Дифференциальные уравнения и процессы управления, N. 3, 2006
Линейный метод Адаптивный метод
Точечный метод Улучшенный точечный метод
Рис. 12: Отображение с задержкой, a = 2.21.
Проведем построение цепно-рекуррентного множества при a = 2.27.
Метод Кол-во Кол-во Время Кол-во Кол-во
узлов ребер работы компонент шагов
Линейный метод 422 636 3 504 285 17 297 ms 2 13
Точечный метод 185 861 450 270 28 406 ms 3 13
Улучшенный точечный метод 367 115 2 501 061 252 625 ms 2 13
Адаптивный метод 381 186 3 712 343 388 609 ms 3 13
Электронный журнал. http://www.neva.ru/journal 88
Дифференциальные уравнения и процессы управления, N. 3, 2006
Изображение цепно-рекуррентых множеств дано на рис. 13. На рис. 14 показана область вблизи седловой точки, где возникает сложное поведение ее
инвариантных многообразий. Визуально все методы построения образа ячейки работают примерно одинакого. Согласно таблице, самым быстрым методом является линейный метод, самым медленным — адаптивный.
Линейный метод Адаптивный метод
Точечный метод Улучшенный точечный метод
Рис. 13: Отображение с задержкой при a = 2.27
Электронный журнал. http://www.neva.ru/journal 89
Дифференциальные уравнения и процессы управления, N. 3, 2006
Линейный метод Адаптивный метод
Точечный метод Улучшенный точечный метод
Рис. 14: Отображение с задержкой, a = 2.27. Область [0, 0.1] × [0, 0.1]
7.7 3х мерная модель Хищник-Жертва-Суперхищник [14]
В работах [5, 14] рассматривается следующая динамическая система
Электронный журнал. http://www.neva.ru/journal 90
Дифференциальные уравнения и процессы управления, N. 3, 2006

x y z

→

4.522x exp(−y)
1+x max(exp(−y),k(z)k(y))
0.962xy exp(−z)k(4yz)k(y)
4yz

, (33)
где k(t) = 1−exp( t −t).
Пусть D = [0.01, 10] × [0.01, 10] × [0.01, 10]. В этом примере рассматривается трехмерная динамическая система. Для хранения ячейки требуется
больше памяти, время вычисления образа одной точки тоже увеличивается. Наиболее хорошие результаты построения инвариантного множества для
этой системы можно получить лишь используя все методы построения образа
ячейки в совокупности. Эффективным по памяти оказывается на каждом шаге дробить ячейки только на две части (только по одной координате). В этом
случае прирост ячеек в построенном графе оказывается минимальным, что
позволяет уложиться в оперативную память компьютера и провести больше
итераций построения символического образа, тем самым построить символический образ с меньшим разбиением.
Значение константы Липшица системы на множестве D оказывается
очень большим, в результате чего адаптивный метод может работать очень
медленно. Приходится вводить ограничения на количество узлов в графе
представления Pf,ψ ε .
Результаты построения цепно-рекуррентного множества приведены в таблице и на рис. 15.
Результаты работы каждого из методов для этого примера сильно отличаются. Видно, что быстрее всего работает точечный метод, и самым долгим
является адаптивный метод, несмотря на введенные ограничения на граф (не
более 100 вершин в графе адаптивного метода для ячейки).
Метод Кол-во Кол-во Время Кол-во Кол-во
узлов ребер работы компонент шагов
Линейный метод 287 627 11 399 582 30 219 ms 1 7
Точечный метод 6 744 33 956 5 297 ms 7 7
Улучшенный точечный метод 110 361 3 771 889 43 359 ms 5 7
Адаптивный метод 150 514 6 525 427 1 167 094 ms 1 7
Электронный журнал. http://www.neva.ru/journal 91
Дифференциальные уравнения и процессы управления, N. 3, 2006
Линейный метод Адаптивный метод
Точечный метод Улучшенный точечный метод
Рис. 15: Результаты вычислений. 3-х мерная модель хищник-жертва-суперхищник.
8 Заключение
Сравним средние скорости работы описанных методов для исследованных
двумерных систем. Для этого для каждой из двумерных систем для каждого метода вычислим среднее количество ячеек v, ребер e, построенных за 1
миллисекунду (ms), и значение отношения числа ребер к числу ячеек v e.
Усредним эти значения по всем исследованным системам для каждого меЭлектронный журнал. http://www.neva.ru/journal 92
Дифференциальные уравнения и процессы управления, N. 3, 2006
тода (v ˜, e ˜ и e/v g). Где под v ˜ понимается среднее арифметическое. По каждому
из устредняемых параметров вычислим среднее квадратичное отклонение по
формуле s iP =1 N (v N i−v ˜)2 , где N количество значений. Сведем полученные результаты в таблицу.
Из собранных данных видно, что самым производительным оказывается
линейный метод. Самым быстрым оказывается точечный метод, но среднее
количество ребер на один узел покрытия оказывается довольно маленьким.
По этому показателю лидирует адаптивный метод, для которого в среднем
на каждую ячейку приходится чуть более 10 ребер. Однако отношение числа ячеек к ребрам меньше всего зависит от системы, если мы применяем
линейный метод.
На практике самым удобным оказывается линейный метод. Он позволяет
получить достаточно хорошие результаты при минимальных затратах времени. Для приближенного рассмотрения системы удобным оказывается использовать точечный метод или улучшенный точечный метод. Они работают
быстрее, но результат получается менее точны. Для некоторых систем оказывается удобным использовать адаптивный метод. Этот метод является наиболее сложным и наиболее медленным, он позволяет получить наибольшее
значение отношения среднего числа ребер исходящих из каждого узла. Исходя из среднего квадратичного отклонения среднего числа исходящих ребер
из каждого узла можно считать, что результат работы этого метода сильнее
зависит от поведения системы, чем результат работы линейного метода.
Электронный журнал. http://www.neva.ru/journal 93
Дифференциальные уравнения и процессы управления, N. 3, 2006
Метод Ср. кол-во Ср. квадр. Время
узлов за ms отклонение работы
v ˜ s iP =1 N (v N i−v ˜)2
Линейный метод 15.802 8.6635 1 945 484 ms
Точечный метод 5.4305 4.7180 1 696 593 ms
Улучшенный точечный метод 2.0527 2.1462 29 589 571 ms
Адаптивный метод 0.7916 0.4803 31 858 960 ms
Метод Кол-во Ср. квадр. Время
ребер за ms отклонение работы
e ˜ s iP =1 N (e N i−e ˜)2
Линейный метод 132.9332 73.6511 1 945 484 ms
Точечный метод 16.0435 11.7427 1 696 593 ms
Улучшенный точечный метод 9.8190 4.9137 29 589 571 ms
Адаптивный метод 8.5444 5.2827 31 858 960 ms
Метод Ребер на Ср. квадр. Время
узел отклонение работы
g
e/v s iP =1 N ( v ei iN −e/v g)2
Линейный метод 8.4534 0.7656 1 945 484 ms
Точечный метод 3.1109 1.2832 1 696 593 ms
Улучшенный точечный метод 7.3512 2.9207 29 589 571 ms
Адаптивный метод 10.8550 0.9591 31 858 960 ms
где N = 7 количество рассмотренных двумерных систем.
Электронный журнал. http://www.neva.ru/journal 94
Дифференциальные уравнения и процессы управления, N. 3, 2006
Список литературы
[1] Ампилова Н.Б., Осипов А.В. Локальные бифуркации для полного
отображения Гардини. Деп. ВИНИТИ 14.06.96,N 1969-B96.
[2] Ампилова Н.Б., Петренко Е.И. Алгоритм компьютерного моделирования множества Жюлиа в случае неподвижной параболической точки.
// Электронный Журнал Дифференциальные Уравнения и Процессы
Управления (http://www.neva.ru/journal), 2,2002
[3] Осипенко Г.С. О символическом образе динамической системы // сб.
Граничные задачи, Пермь, 1983, с.101-105.
[4] Осипенко Г.С., Романовский И.В., Ампилова Н.Б., Петренко Е.И., О
вычисление спектра Морса // Проблемы Математического Анализа,
Выпуск 27, Январь 2004, с. 151-169.
[5] Осипенко Г.С., Ампилова Н.Б. Введение в символический анализ динамических систем. // Изд. СПбГУ, 2005. ISBN: 5-288-03656-X
[6] Пайтген Х.O., Рихтер П.Х. Красота фракталов. // Образы комплексных динамических систем. M, 1993.
[7] Писсанецки С. Технология разреженных матриц. // М., Мир, 1988.
[8] Aronson D.G.,Chory M.A., Hall G.R. et.all Bifurcation from an invariant
circle for two-parameter families of maps of the plane: A computer-assisted
study. // Commun.Math.Phys.83,3(1982), p.303-354.
[9] Gardini L., Abraham R., Record R.J., Fournier-Prunaret D. A double
logistic map. // Int.J.Bif.and Chaos,4,1(1994), p.145-176.
[10] Henon M. A two-dimensional mapping with a strange attractor. // Comm.
Math.Phys. v.50,69-77(1976).
[11] Ikeda K. Multiple-valued stationary state and its instability of the
transmitted light by a ring cavity system // Opt. Comm. 1979, Vol.30,
p.257-261.
[12] Julia G. Sur l’iteration des fonctions rationneles. // Journal de Math.Pure
at Appl. 8:47-245. 1918
Электронный журнал. http://www.neva.ru/journal 95
Дифференциальные уравнения и процессы управления, N. 3, 2006
[13] Osipenko G. Numerical Explorations of the Ikeda mapping dynamics
// Electronic Journal of Differentional Equations and Control Processes
(http://www.neva.ru/journal), Vol.2, 2004
[14] Linsdrom T. Dependencies between competition and predation — and their
consequences for initial value sensitivity, // SIAM J. Appl. Math. Vol59,
pp.1468-1486
Электронный журнал. http://www.neva.ru/journal 96