ДИФФЕРЕНЦИАЛЬНЫЕ 
УРАВНЕНИЯ 
И 
ПРОЦЕССЫ УПРАВЛЕНИЯ 
N. 4, 2023 
Электронный журнал, 
рег. Эл № ФС77-39410 от 15.04.2010 
ISSN 1817-2172 
 
http://diffjournal.spbu.ru/ 
e-mail: jodiff@mail.ru 
 
 
 
Информационные системы и процессы 
 
Суммирование перечислителей в задачах дискретной 
оптимизации в контексте управления мастер-данными  
 
Кузнецов С.В.
 1,2,*
 
 
1
ООО «Юнидата» 
2
Санкт-Петербургский государственный университет 
 
*
sergey.kouznetsov@gmail.com 
 
Аннотация. В данной работе рассматриваются субоптимальные задачи дискретной 
оптимизации. Формализована концепция перечислителей, предложенная известным 
ленинградским математиком И.В. Романовским. Представлен эффективный алгоритм 
перебора решений для суммы перечислителей на основе пересчёта границы Парето. 
Приводятся схема использования операции суммирования перечислителей при 
масштабировании решений задач по управлению мастер-данными. 
 
Ключевые слова: перечислители, субоптимальные задачи, дискретная оптимизация, 
граница Парето, управление мастер-данными. 
 
1. Введение 
 
Задачи по оптимизации различных ресурсов активно изучались в Петербургской 
математической школе со времён Л.В. Канторовича [1]. В конце 90-х годов его ученик проф. И.В. 
Романовский предложил и развил концепцию процессов-перечислителей субоптимальных 
решений [2-4]. 
На сегодняшний день во многих практических задачах оптимизации требуется найти не только 
лучшее (оптимальное) решение, но k лучших решений, для которых целевая функция упорядочена 
по степени деградации. Такие задачи называются субоптимальными (реже используется термин k-
оптимальные), и они часто возникают в комплексных задачах принятия решений, когда 
необходимо учитывать многочисленные факторы и рассматривать несколько «лучших решений». 
Субоптимальные задачи находят применение в различных бизнес-областях – при оценке рисков Дифференциальные уравнения и процессы управления, N. 4, 2023 
 
https://doi.org/10.21638/11701/spbu35.2023.403     Электронный журнал: http://diffjournal.spbu.ru      43 
[5], в управлении производством [6], в системах поддержки принятия решений [7,8], а также при 
управлении данными в биоинформатике и информационных системах [9].  
Управление мастер-данными (Master Data Management) является особой областью управления 
данными крупных организаций [10], занимаясь агрегацией данных из различных источников и 
решением прикладных задач на основе этой агрегации. Данная область очень динамична, для неё 
создано большое количество методов, алгоритмов и готовых программных инструментов. В то же 
время в ней продолжает оставаться значительное количество проблем, связанных как со 
стоимостью и затратами, так и с эффективностью итоговых алгоритмов.      
Перечислитель является процессом перебора решений некоторой субоптимальной задачи в 
порядке деградации целевой функции. Для перечислителей введен ряд операций – монотонное 
преобразование, слияние, суммирование и др. [2,3]. Эти операции полезны при масштабировании 
субоптимальных задач и способны понизить сложность итоговых алгоритмов, позволяя 
составлять их из них решения более простых задач (меньших по количеству допустимых 
решений, числу параметров оптимизации, объёму обрабатываемых данных и т.д.).  
Среди операций над перечислителями особую роль играет суммирование (идея была 
предложена в [11]): эта операция позволяет объединять решения задач в разных доменах в 
искомое субоптимальное решение исходной задачи. В отличии от остальных операций для этой 
нетривиальным является составить алгоритм, перебирающий решения для суммы перечислителей. 
Конструированию такого алгоритма и доказательству его корректности посвящена данная работа.   
Данная статья является обновленной версией статьи 2005 года [3]. Выполнено более строгое 
определение концепции перечислителя (в частности, рассмотрены бесконечные перечислители), 
предложена формализация алгоритма перебора решений для суммы перечислителей, исследованы 
дополнительные свойства данного алгоритма, а также предложена схема применения этих 
результатов при масштабировании задач управления мастер-данными [9,10]. Также по сравнению 
с исходной версией [3] был исправлен ряд ошибок. 
Статья организована следующим образом. Представлена уточненная формальная концепция 
перечислителя, включая определение субоптимальной задачи дискретной оптимизации, доказан 
ряд свойств перечислителей (раздел 2). Представлена схема применения перечислителей и 
операции суммирования для масштабирования задач управления мастер-данными, дано строгое 
определение операции суммирования с вытекающей отсюда проблемой нахождения алгоритма 
перебора для итогового перечислителя-суммы (раздел 3). Формально введена граница Парето и 
доказан ряд её свойств (раздел 4). Предъявлен алгоритм перебора решений для суммы двух 
перечислителей, показано, как его можно распространить на сумму произвольного количества 
слагаемых, приводится формальное доказательство корректности алгоритма (раздел 5). 
 
 
2. Субоптимальные задачи дискретной оптимизации и перечислители 
 
В данном разделе кратко изложена и формализована концепция перечислителей решений 
субоптимальных задач дискретной оптимизации. 
Определение 1. Пусть имеется пара (   ,    ), где     является конечным или счетным 
множеством некоторых объектов, а    – функцией вида     ⟶ ℝ, имеющей минимум на    (ℝ – это 
множество вещественных чисел), называемая целевой функцией. Тогда задачей дискретной 
оптимизации будет поиск решения – элемента    0
 из D, на котором функция    достигает 
минимума, т.е.    0
= a              ∈      (   ). При этом    будем называть множеством допустимых 
решений данной задачи, а эту задачу дискретной оптимизации обозначим как          ̅ ̅ ̅ ̅ ̅ ̅ ̅
= (   ,    ). 
 
Переходя к рассмотрению субоптимальной задачи дискретной оптимизации отметим, что в 
литературе термин субоптимальный означает «не оптимальный, но близкий к оптимальному». Это 
легко формализуется в случае непрерывной целевой функции, например, в задачах оптимального 
управления [12]. В случае многоцелевой оптимизации субоптимальными решениями некоторой 
задачи называют те из них, которые оптимальны по одной из целевых функций [7]. Однако для Дифференциальные уравнения и процессы управления, N. 4, 2023 
 
https://doi.org/10.21638/11701/spbu35.2023.403     Электронный журнал: http://diffjournal.spbu.ru      44 
задачи дискретной оптимизации необходимо рассматривать различные способы оценки близости 
найденных решений к оптимальному [13]. 
Определение 2. Пусть имеется некоторая задача дискретной оптимизации          ̅ ̅ ̅ ̅ ̅ ̅ ̅
= (   ,    ). 
Создадим на её основе субоптимальную задачу дискретной оптимизации, построив процесс    , 
который на шаге    возвращает следующее самое оптимальное (т.н. субоптимальное) решение 
задачи          ̅ ̅ ̅ ̅ ̅ ̅ ̅
  после решений    0
, … ,       −1
. При этом нас будут интересовать не все 
субоптимальные решения, а лишь первые    (поэтому субоптимальные задачи часто называют    -
оптимальными); число    будем называть значением субоптимальности. Таким образом, саму 
задачу будем обозначать как           = (   ,    ,    ,    ). 
Отметим, что    может быть бесконечным. 
Нас интересует то, как может быть устроен процесс    , который мы будем называть далее 
перечислителем. 
 
Определение 3. Пусть имеется некоторая субоптимальная задача дискретной оптимизации 
         = (   ,    ,    ,    ).  Тогда процесс перебора    решений задачи          , который далее мы будем 
называть перечислителем, зададим как P = (    0
,    ), где     0
 ∈    — оптимальное решение задачи 
         ̅ ̅ ̅ ̅ ̅ ̅ ̅
, а    является всюду определённой функцией    :    →    (т.н. функцией перебора решений), 
которая удовлетворяет следующим условиями: 
∀    ∈    :    (   ) ≤    (   (   ))  
(1) 
∀    ′
∈    \{   0
} ∃!    ′′∈     |      (   ′′ ) =    ′   и       ′′
≠     ′ (2) 
∃    ∈ ℝ:  ∀    ∈    либо    >    ,  либо последовательность 
равенств    (   ) =    (   (   )) = ⋯ =    (      (   )) всегда конечна 
за исключением ситуации, когда     (   ) =    . 
(3) 
Таким образом, функция    по уже имеющемуся решению задачи          выдаёт следующее в 
смысле оптимальности. При этом каждое следующее решение, выдаваемое    , не лучше 
предыдущего в смысле значения функции    , что задаётся условием (1).  
Свойство (2) утверждает, что любой элемент из    , кроме начального, является образом 
некоторого другого элемента из    , полученного применением    . Единственность прообраза 
гарантирует отсутствие циклов в случае конечности    . 
Свойство (3) выражает мысль о том, что     является множеством объектов, имеющих 
дискретную природу (например, множеством всех возможных путей в графе из 100 вершин), и 
даже если имеются, например у графов, вещественные веса на рёбрах, то эти значения 
рассматриваются с некоторой фиксированной точностью. 
 
Лемма 1. Пусть имеется задача          . Тогда её перечислитель P =  (   0
,    ) позволяет 
упорядочить все элементы множества    следующим образом:    = {   0
,    1
. . . },    (      ) =       +1
,  
где    ∈ [0, |   | − 1], если     конечно, или    ∈ ℕ
0
, если    бесконечно. 
Доказательство. В силу (2) для любого    ′
∈    ,    ′
 ≠    0
  можно построить 
последовательность     1
, …       , …   элементов из    такую, что    ′
=    1
, а         +1
=    −1
(       ).   В 
силу (1) имеем     (       +1
) ≤    (       ). Поскольку функция    имеет минимум, а также в силу (3), мы 
должны остановится в смысле уменьшения функции    . Мы не можем это сделать за счет 
зацикливания вида    −1
(   ) =    для одного из элементов нашей последовательности в силу (2). В 
силу (3) мы не можем зациклиться из-за равенства значений     на разных элементах    . Также мы 
не можем остановиться, достигнув минимума    на    ≠    0
, т.к. из этого    , в силу (2) мы должны 
двинуться дальше, а уменьшаться дальше    не может, значит, у нас должна быть цепочка равенств 
   (   ) =    (   (   )) = ⋯ =    (      (   )), которая, в силу (3), конечна. Итак, остановиться в смысле 
уменьшения значения функции    мы может лишь попав в    0
 поскольку этот элемент не имеет 
прообраза в смысле    . Дифференциальные уравнения и процессы управления, N. 4, 2023 
 
https://doi.org/10.21638/11701/spbu35.2023.403     Электронный журнал: http://diffjournal.spbu.ru      45 
Таким образом, элемент    ′
 оказывается достижим из    0
  с помощью    , т.е. ∃    ∈ ℕ:    ′
=
    −   (    0
).  Далее, если у нас есть два произвольных элемента    ′
и    ′′
∈    , то оба они достижимы 
из      0
. Но с помощью    можно построить единственную траекторию из    0
, поэтому существует   
   ∈    такое, что либо    ′
=       (   ′′
), либо наоборот. Более того, очевидно, что на эту траекторию 
через конечное количество шагов попадёт любой элемент из    ∎ 
Несложно доказать, что существует не более одного элемента    ∈    :    (   ) =    .  В самом 
деле, если имеется два таких элемента, то, повторяя рассуждение, представленное в 
доказательстве леммы 1, оба они должны лежать на одной траектории, ведущей из      0
, но ни один 
из них не может предшествовать другому, поскольку из каждого не возможен путь далее по 
множеству    . Будем обозначать такой элемент как           .   
Очевидно также, что в случае конечности     такой элемент всегда должен иметься, поскольку 
   всюду определена. Таким образом, признаком окончания работы    в случае конечности    
является зацикливание    на одном элементе (зацикливание на нескольких элементах, т.е. петля 
более чем из одного элемента) невозможно в силу единственности прообраза (см. условие (2)) – в 
месте склейки петли у соответствующего элемента тогда было бы два прообраза.  
Кроме того, ясно также, что в этот элемент мы попадаем, когда всё множество    уже 
пройдено. Кроме того, такого элемента не может существовать, если      бесконечно.   
Бесконечность множества    оправдана, поскольку существуют, например, локально-конечные 
графы, на которых можно решать различные субоптимальные задачи дискретной оптимизации. 
Также в практических задачах пространство решений может быть бесконечным за счет его 
постоянной перестройки – например, граф, в котором мы ищем кратчайший путь, может меняться. 
Однако на практике мы, как правило, имеем дело с конечным случаем, а при сильном изменении 
исходных структур данных целесообразно начинать вычисление    заново, таким образом получая 
локально-конечную задачу.  
Далее в этой работе мы будем полагать множество    конечным, причём |   | ≥    (мы 
оставляем случай бесконечного    для дальнейших исследований). Для конечного случая свойство 
(3) тривиально выполняется. 
 
3. Масштабирование субоптимальных задач управления мастер-данными 
 
Многие организации, имея разнообразные данные, хранят их раздельно, в разных форматах, 
СУБД и т.д. Также, зачастую с этими данными работают разные подразделения организации.  
Эффективное управление гетерогенными данными является важной чертой современного 
цифрового пространства крупных организаций.  Очищенные, консолидированные, полные данные 
предприятий и организаций, извлечённые из различных источников (в том числе различных 
информационных систем), принято называть мастер-данными (master data) [10]. Значительное 
количество задач, с которыми сталкиваются крупные организации, может быть решено на основе 
этих данных – далее такие задачи будем называть задачами управления мастер-данными.  
В задачах управления мастер-данными часто появляются субоптимальные задачи дискретной 
оптимизации.    -оптимальные решения таких задач требуются для обеспечения быстрой реакции 
системы (например, трейдерские задачи), для различных видов стоимостного анализа и тому 
подобных [11]. При этом оказывается, что в силу гетерогенности мастер-данных возникающие 
прикладные задачи эффективнее решать, разбив данные на домены [9], а итоговое решение 
составлять из решения этих, так называемых, локальных задач. Таким образом, мы приходим к 
необходимости масштабирования прикладных задач и соответствующих решений.   
В том случае, когда нам нужно решить субоптимальную задачу дискретной оптимизации для 
сложного, составного домена, целесообразно и задачу, и данные разбить на части, решая 
локальные задачи, а общее решение составить как некоторую композицию решений локальных 
задач. Например, имея задачу поиска оптимальной конфигурации деталей для сборки автомобиля, 
мы можем решать её отдельно для ходовой части, для кузова и других крупных узлов, а затем 
составим общую оптимальную конфигурацию. Таким образом, мы масштабируем только данные Дифференциальные уравнения и процессы управления, N. 4, 2023 
 
https://doi.org/10.21638/11701/spbu35.2023.403     Электронный журнал: http://diffjournal.spbu.ru      46 
– сама же задача остаётся неизменной. При этом может оказаться, что в каждой части задача 
оптимальной конфигурации может иметь свою специфику – следовательно, и задачи могут 
оказаться разными.  
 Масштабирование задачи означает, что её можно выразить (математически) через локальные 
задачи. Фактически, всё сводится к операциям над целевыми функциями.  При этом, если 
ограничиться простыми операциями, то не сложно составить итоговую целевую функцию на 
основе локальных. Однако может оказаться, что при этом создать итоговый перечислитель на 
основе локальных будет не так просто. 
Говоря неформально, мультидоменная задача дискретной оптимизации в области управления 
мастер-данных при разбиении на домены может быть представлена (масштабирована) как сумма 
локальных задач, т.е. целевая функция здесь будет суммой локальных целевых функций. А как 
быть с перечислителем?  
Простой пример показывает, что итоговый перечислитель не будет простой суммой 
локальных. Пусть необходимо простроить последовательность путей передвижения из точки С в 
точку М, неубывающую по их стоимости, начиная с самого дешевого, при условии, что эти точки 
находятся в разных городах. Очевидно, что каждый такой путь можно разбить на три 
составляющие (отрезки): (a) путь внутри города-отправления, начинающийся из точки С; (b) путь 
между городами; (c) путь внутри города-прибытия, заканчивающийся в точке М. Для каждого из 
этих отрезков построим перечислители субоптимальных путей, и тогда их сумма должна быть 
перечислителем путей исходной задачи. Если предположить, что стоимость пути между городами 
(отрезок (b)) существенно превышает стоимости путей внутри городов (отрезки (a) и (c)), то 
несколько первых оптимальных решений всей задачи будут иметь неизменный отрезок пути (b). 
Пусть задан набор задач {         1
, . . ,              }, где       = (      ,       0
). Результатом операции 
суммирования этих задач является субоптимальная задача                   =          1
+. . . +            
такая, что: 
 
               = (          ,           ,    ,        (   1
, . . ,       )), где  
(4) 
          =    1
×. .×       ,    = ∏          =1..   , 
∀    = (   1
, …       )            (   ) = ∑       (      )
   ∈1:   , 
       (   1
, . . ,       ) = (   0
,          ),    0
 = {   1
0
, . . ,       0
}. 
Для завершения определения операции суммирования в части результирующего 
перечислителя        (   1
, . . ,       ) нам нужно предъявить функцию перебора            , доказав, что она 
удовлетворяет условиям (1) и (2). Как мы отметили выше, функцию перебора результирующего 
перечислителя не получается задать простой формулой от    1
, … ,       . Однако интуитивно понятно, 
что такая функция существует, так как множество решений задачи                конечно и является 
полностью упорядоченным. 
Замечание 1. Для каждой субоптимальной задачи дискретной оптимизации существует 
единственная, с точностью до порядка следования решений с одинаковым значением целевой 
функции, функция перебора субоптимальных решений. 
Это замечание непосредственно следует из определения 2, которое требует, чтобы 
субоптимальное решение       с номером      было оптимальным решением соответствующей 
задачи на множестве     \{   0
, … ,       −1
}. 
 
4. Граница Парето  
 
Для эффективной реализации функции перечисления субоптимальных решений для суммы 
перечислителей нам понадобится понятие границы Парето. Это понятие было введено в 
экономике и социологии В. Парето в начале XX века и означает множество точек в некотором 
пространстве, оптимальных по определённым параметрам, и для точек этого множества нельзя Дифференциальные уравнения и процессы управления, N. 4, 2023 
 
https://doi.org/10.21638/11701/spbu35.2023.403     Электронный журнал: http://diffjournal.spbu.ru      47 
улучшить один из параметров, не ухудшив другие. В настоящее время это понятие используются в 
различных отраслях экономики, теории принятия решений, управления производством и пр.  
Рассматривая задачу                
 и сумму перечислителей        (   1
, . . ,       ), введём для каждого 
перечислителя-слагаемого       отрезок натурального ряда       = 1:       , где       – значение 
субоптимальности для задачи             . Пусть    =    1
× … ×       . Каждый элемент    однозначно 
определяет решение субоптимальной задачи                
 как сумму решений задач-слагаемых. 
 
Определение 4. Набор    = (   1
, … ,       ) ∈    доминирует набор    = (   1
, … ,       ) ∈    , если  
      ≤       для каждого    ∈ 1:    .  
Таким образом, если рассматриваемые наборы индексов соответствуют порядковым номерам 
решений субоптимальных задач           1
…             , то доминирующий набор    соответствует более 
оптимальным решениям, чем    , поэтому он и доминирует над    .  Нетрудно убедиться в том, что 
доминирование является отношением частичного порядка на множестве картежей из     . 
 
Лемма 2. Пусть набор    = (   1
, … ,       )  доминирует набор J = (   1
, … ,       )    и                =
          1
+. . . +            . Рассмотрим  следующие решения задачи                :    = {   1
   1
, . . ,             } и 
    ′
= {   1
   1
, . . ,             }, где            – это    -ое субоптимальное решение задачи             . В этом случае 
справедливо следующее:           (   ) ≤           (   ′
). 
Доказательство. В силу того, что    доминирует    , а также условия (1), справедливо 
следующее неравенство: 
 
∑       (            )
   ∈1:     ≤ ∑       (            )
   ∈1:   . 
(5) 
 
Из этого напрямую следует утверждение леммы ∎ 
 
Определение 5. Пусть задано некоторое частично упорядоченное по отношению 
доминирования множество    (это означает, что для некоторых элементов    1
 и    2 
∈    
справедливо, что либо    1
=    2 
, либо    1
  доминирует    2 
, либо    2
 доминирует    1
).   Границей 
Парето множества    называется такое его подмножество    , что любой элемент    ∈    ∖    
доминируется каким-либо элементом из    , и никакой элемент из    не доминируется другим 
элементом из    . 
 
5. Функция перебора решений для суммы двух перечислителей  
 
Предъявим алгоритм для вычисления функции перебора          задачи                в случае двух 
слагаемых. 
Для некоторой задачи          будем обозначать её    -е решение как       =       (   0
). Логично 
предполагать, что уже вычисленные решения задачи          сохраняются и потом не вычисляются 
повторно, поэтому к ним возможен прямой доступ по индексу {      ,       } =    .        (   ), где       – 
значение целевой функции    -го решения. 
Итак, имеем задачи          1
 и           2
 , перечислители    1
= (   1
0
,    1
) и    2
= (   2
0
,    2
), а также 
соответствующие значения субоптимальности    1
 и    2
. 
Введём целочисленный массив    0
 длинной    1
+ 1,  где    0
[0] =    2
,    0
[   ] = 1 для    ∈ 1. .    1
, 
а также множество    0
= {(1,1)}. 
На листинге 1  представлен алгоритм, который по    1
,    2
,       −1
,       −1
 выдаёт       ̅ ̅ ̅ ̅
,       ,       . 
 
1      Вход:    1
,    2
,       −1
,       −1
  
2             =       −1
,       =       −1
 Дифференциальные уравнения и процессы управления, N. 4, 2023 
 
https://doi.org/10.21638/11701/spbu35.2023.403     Электронный журнал: http://diffjournal.spbu.ru      48 
3      for each    ∈        
4  {   1
,    1
} =    1
. get(   .    )   
5  {   2
,    2
} =    2
. get(   .    )   
6  if       >    1
+    2
 then 
7         =    1
+    2
      
8         ̅ ̅ ̅ ̅
 = {   1
,    2
} 
9         = b  
10  if        [      .    ] <    2
,  then  
11        [      .    ]++                  /*    (      [0]) стал равен       .    + 1 
12       =       \ {      }  
13 if  (1 <       .    <    1
) & (       [      .    − 1]  −       .    ) = 1)  then 
14        ∪= {      . x + 1,       [       . x + 1]) } 
15 elseif        [      .    − 1] >       [      .    ] || (      .    = 1) then 
16        ∪= {[      .    ,       [(      .    )]} 
17 Вы хо д:       ̅ ̅ ̅ ̅
,       ,       
Листинг. 1. Алгоритм вычисления    -го решения суммы двух перечислителей 
 
Докажем, что представленный алгоритм реализует          , т.е.       ̅ ̅ ̅ ̅
 является m-тым 
субоптимальным решением       задачи                .  Введём следующие обозначения: 
 
   0
=    ,  
(6) 
      =       −1
 \ {      }, 
 
где       – это набор индексов, по которым однозначным образом определяется       ̅ ̅ ̅ ̅
  , выдаваемое 
алгоритмом листинга 1 (строки 3–9). 
 
Лемма 3. Множество        ,  выдаваемое алгоритмом листинга 1, является границей Парето для 
множества       при    :  0 ≤    ≤    1
∗    2
. 
Доказательство. Для начала покажем, что алгоритм листинга 1 строит множество       , 
которое можно задать следующим образом: 
 
      = { (   ′,    ′) |       [   ′ − 1] >       [   ′],    ′ =       [   ′
],    ′ ∈ 1:    1
}. 
(7) 
 
Доказательство (7) проведем индукцией по    .  Для    0
 (7) очевидно выполнено. Согласно 
предположению индукции будем полагать, что оно выполнено для       −1
. 
Приступая к построению  множества       положим его равным множеству       −1
(строка 2). 
Далее элемент       = (   ,    ) удаляется из       (строка 12), массив       будет отличаться от       −1
 
только в элементе    :       [   ] =        −1
[   ] +1  и становится равным    + 1 (строка 11). 
Отметим, что в итоге в множество       войдет элемент (   + 1,       [   + 1]) (строка 14), 
поскольку значение       [   ] на шаге    увеличено на единицу, а согласно предположению 
индукции для       −1
 выполнено        [   + 1] ≤    <       [   ], поскольку (   ,    ) ∈        −1
. При этом 
данный элемент уже мог содержаться в       −1
 , например если |      [   ] −       [   + 1]| > 1.  
Поскольку элемент (   ,    ) удален из       , то       [   − 1] >    + 1, а значит элемент (   ,    + 1) 
должен войти в       , поскольку       [   ] =    + 1. Отметим, что       [0] =    2
, следовательно,  для 
   = 1 всегда выполняется этот сценарий. Это условие и определяет вхождение элемента 
(   ,       [   ]) в       , что реализовано в строках 15-16.  
Таким образом мы показали, что       удовлетворяет (7). 
 Дифференциальные уравнения и процессы управления, N. 4, 2023 
 
https://doi.org/10.21638/11701/spbu35.2023.403     Электронный журнал: http://diffjournal.spbu.ru      49 
Перейдём к доказательству утверждения леммы и проведём его индукцией по    . Для 
множества    0
 это утверждение очевидно, поскольку очевидно, что     0
⊂    0
. При этом    0
 
состоит из одного элемента (1, 1), который доминирует все другие элементы    0
.  
Предположим, утверждение выполнено для множества        −1
 при    > 0. Множество        
получается удалением из        −1
 элемента       = (   ,    ), который входил в        −1
 (строки 3, 9). При 
этом элемент       также удаляется из        (строка 12), а в        добавляются только элементы 
из       −1
 (строки 14, 16), значит,        ⊂       . 
Рассмотрим значение       [   − 1]. Возможны следующие случаи:       [   − 1] =    + 1 или 
      [   − 1] >    + 1. Случай       [   − 1] <    + 1 невозможен по построению       .  При этом 
будем полагать, что    > 1, поскольку если     = 1 , то в множество        на шаге    войдет элемент  
(1,    + 1), и таким образом, очевидно, что        будет границей Парето для множества        .  
Случай 1.       [   − 1] =    + 1 (строка 13). Это означает, что элемент (   ,    + 1), определяемый 
новым значением       [   ], не попадает в множество       в силу (7). Однако там содержится элемент 
(   − 1,    + 1), который доминируют элементы множества {(   ′
,    ′
)|    − 1 ≤    ′
,    + 1 ≤    ′
}, и 
элемент (   + 1,       [   + 1]), который доминирует {(   ′
,    ′
)|    + 1 ≤    ′
,       [   + 1] ≤    ′
}. 
Пересекая эти множества и принимая во внимание, что элемент (   ,    ) уже исключен из       , а 
множество       −1
 было границей Парето согласно предположению индукции, мы видим, что 
      = {      −1
∖ {(   ,    )}} ∪ {(   + 1,       [   + 1])} и является границей Парето множества       . 
Случай 2.       [   − 1] >    + 1. Этот означает, что в множество       войдет новый элемент 
(   ,    + 1) (строка 16). Осталось лишь проверить те элементы, которые им не доминируются, а 
именно    = {(   ′
,    ′
)|    ≤    ′
,    =    ′
}. Выше показано, что элемент (   + 1,       [   + 1]) ∈       , 
следовательно, доминируются элементы  {(   ′
,    ′
)|    + 1 ≤    ′
,       [   + 1] ≤    ′
}. Тогда, 
принимая во внимание, что (   ,    ) уже исключен из       и выполнено        [   + 1] ≤    , получаем, 
что множество    ∖ {(   ,    )} доминируется элементом (   + 1,       [   + 1]) ∈       . Таким образом и 
в этом случае       является границей Парето множества       ∎ 
 
Теорема 1. Пусть                =          1
+          2
 . Тогда алгоритм с листинга 1 задает          , 
т.е.       ̅ ̅ ̅ ̅
 =       и         (   1
,    2
) является перечислителем. 
Доказательство. Согласно определению 2 для того, чтобы        (   1
,    2
) был перечислителем, 
необходимо, чтобы для T        выполнялись условия (1) и (2). 
 Для доказательства истинности условия (1) применим индукцию по    , а именно, что          
выбирает решение       с наименьшим значением функции           (      ) из еще не выбранных ранее, 
т.е. из множества           \{   0
, … ,       −1
}. В силу леммы 2 решение с минимальным возможным 
значением целевой функции           лежит на границе Парето множества возможных решений 
          \{   0
, … ,       −1
} и однозначным образом задается индексами подчиненных перечислителей. 
Таким образом, для обеспечения условия (1) достаточно выбрать решение с минимальным 
значением функции           из таких элементов множества           , которые построены по индексам 
решений подчиненных перечислителей из множества       , а последнее, согласно Лемме 3,  
является границей Парето множества индексов       . Выбор решения с минимальным значением 
          реализован в строках 3–9 листинга 1. 
Условие (2) для           выполняется в силу того, что ∀    = {   1
,    2
} ∈    \{   0
} истинно,  что 
∃    ′ = {   ′
1
,    ′
2
} ∈           , где либо    1
=          (   ′
1
) либо    2
=          (   ′
2
). Это следует из 
выполнения условия (2) для    1
 и    2
, а значит, элемент    оказывается достижим из    ′ за счет 
конечного числа суперпозиций           над значением    ′, кол-во которых не превышает 
       (   1
,    2
)∎ 
Сложность вычисления          для случая суммирования двух перечислителей является 
линейной от количества элементов в границе Парето на очередном шаге, поскольку перебираются 
лишь элементы текущей границы Парето (одномерный массив элементов), а не все возможные 
сочетания пар решений. Соответственно, в худшем случае перебираются все решения одного из 
подчиненных перечислителей, а пересчет вспомогательных структур ограничивается запросами к 
массиву       . Дифференциальные уравнения и процессы управления, N. 4, 2023 
 
https://doi.org/10.21638/11701/spbu35.2023.403     Электронный журнал: http://diffjournal.spbu.ru      50 
Теперь, имея полностью определенную задачу                =          1
+          2
 для двух 
слагаемых, мы можем рассмотреть случай    > 2 . Имеем ∑                   =1
= (… (         1
+          2
) +
         3
 ) + ⋯ +             ) … ), следовательно, итоговый перечислитель задачи                получается 
с помощью    − 1 попарных сложений перечислителей, и мы можем    − 1 раз применить 
представленный выше алгоритм для вычисления очередного субоптимального решения задачи 
               (т.е. функции          ).   А в силу замечания 1 мы имеем единственную функцию 
перебора субоптимальных решений для этой задачи. 
Однако следует отметить, что может существовать больше одного алгоритм вычисления 
         перебора несмотря на то, что все они будут иметь одинаковую (с точностью до 
перестановок равных субоптимальных решений) выдачу. Следует ожидать, что эти алгоритмы 
могут иметь разную сложность. 
 
6. Заключение  
 
Выше приведены формальные определения перечислителей субоптимальных решений в 
задачах дискретной оптимизации, а также операции их суммирования. Полученные результаты 
обосновывают эффективное использование теории перечислителей для задач поиска 
субоптимальных решений в различных областях, в том числе в области управления мастер-
данными. Масштабирование субоптимальных задач и представленный алгоритм суммирования 
перечислителей позволяет существенно снизить сложность разработки алгоритмов, в частности, 
для задач управления данными и мастер-данными. Для рассмотренного выше примера известной 
задачи об оптимизации набора комплектующих для сложного изделия в условиях ценовой 
дисперсии и ограничения поставок, которая сводится к известной задаче о переборе    -кратчайших 
путей в графе [11], использование перечислителей и предложенного алгоритма их суммирования 
может позволить существенно снизить сложность решения исходной задачи [14], что, однако, 
является предметом дальнейшего исследования. Также небезынтересным является использование 
модельно-ориентированных решений [15, 16] для визуализации отдельных аспектов задачи 
управления мастер-данными в контексте данных исследований. 
 
Благодарности 
 
Хочу посвятить эту работу моему учителю профессору И. В. Романовскому, и выразить 
благодарность моему научному руководителю профессору Д. В. Кознову за помощь и 
внимание к деталям. 
 
Литература  
 
[1] Канторович Л.В. Математические методы организации и планирования производства. 
Л.: Изд-во ЛГУ, 1939, 68 с. 
[2] Романовский И.В. Субоптимальные решения. Петрозаводск: Изд-во Петрозаводского 
университета. 1998. 
[3] Романовский И. В., Кузнецов С. В. Обобщенный алгоритм суммирования 
перечислителей субоптимальных решений //Вестник Санкт-Петербургского 
университета. Математика. Механика. Астрономия. – 2005. – №. 2. – С. 74-87. 
[4] Романовский И. В. Перебор субоптимальных решений в дискретных задачах 
оптимизации //Компьютерные инструменты в образовании. – 2012. – №. 6. – С. 25-34. 
[5] Брумштейн Ю. М., Тарков Д. А., Дюдиков И. А. Анализ моделей и методов выбора 
оптимальных совокупностей решений для задач планирования в условиях ресурсных 
ограничений и рисков //Прикаспийский журнал: управление и высокие технологии. – 
2013. – №. 3. – С. 169-180. Дифференциальные уравнения и процессы управления, N. 4, 2023 
 
https://doi.org/10.21638/11701/spbu35.2023.403     Электронный журнал: http://diffjournal.spbu.ru      51 
[6] Лукичева Н. М. О математических подходах в планировании, прогнозировании и 
управлении //Актуальные вопросы развития современного общества. – 2019. – С. 306-
309. 
[7] Кириллов Ю. В. Многокритериальное моделирование как основа информационных 
технологий поддержки принятия решений // Фундаментальные исследования. – 2004. – 
№. 6. – С. 85-97. 
[8] Marler R. T., Arora J. S. Survey of multi-objective optimization methods for engineering 
//Structural and multidisciplinary optimization. – 2004. – Т. 26. – С. 369-395. 
[9] Кузнецов С., Константинов А., Скворцов Н. Ценность Ваших Данных, Изд-во Альпина 
PRO, 2022. 
[10] DAMA-DMBOK: Свод знаний по управлению данными. Второе издание. Москва: 
Олимп-Бизнес, 2020. 
[11] Minieka E., Shier D. A note on an algebra for the k best routes in a network// Journ. Inst. 
Math. Appl. 1973. Vol. 11. P. 145–149. 
[12] О. Е. Майкова. Субоптимальные режимы в задаче Фуллера // Труды МИАН, 2002, том 
236, 226–229. 
[13] Бабаев Д. А., Мамедов К. Ш., Мехтиев М. Г. Методы построения субоптимальных 
решений многомерной задачи о ранце //Журнал вычислительной математики и 
математической физики. – 1978. – Т. 18. – №. 6. – С. 1443-1453. 
[14] Mohanta K. et al. Comprehensive study on computational methods for k-shortest paths 
problem // International Journal of Computer Applications. – 2012. – Т. 40. – №. 14. – С. 22-
26. 
[15] Кознов Д.В. Методология и инструментарий предметно-ориентированного 
моделирования. Диссертация на соискание ученой степени доктора технических наук / 
Санкт-Петербургский государственный университет. Санкт-Петербург, 2016. 
[16] Кознов Д.В., Перегудов А.Ф., Бугайченко Д.Ю., Чернятчик Р.И., Казакова А.С., 
Павлинов А.А. Визуальная среда проектирования систем телевизионного вещания. 
Системное программирование. 2006. Т. 2. № 1. С. 142-168. 
  Дифференциальные уравнения и процессы управления, N. 4, 2023 
 
https://doi.org/10.21638/11701/spbu35.2023.403     Электронный журнал: http://diffjournal.spbu.ru      52 
 
Summation of the enumerators in discrete optimization problems in 
the context of master data management 
 
Kuznetsov S.V.
 1,2,*
 
 
1
 Unidata LLC 
2
 Saint-Petersburg State University 
 
*
sergey.kouznetsov@gmail.com 
 
Abstract. The publication presents an approach to the use of discrete optimization algorithms, in 
particular, the search for suboptimal solutions. The theory of enumerators, proposed by the famous 
Leningrad mathematician I.V. Romanovsky, and the operation of their summation, which is 
proposed to be used to create multi-domain suboptimal algorithms, are considered. The paper 
presents an efficient algorithm to sum enumerators based on the recalculation of the Pareto 
boundary. Motivations for using the proposed algorithm within the framework of a well–known 
task in the field of Master Data Management are given. 
 
Keywords: enumerators, suboptimal problems, discrete optimization, Pareto boundary, master data 
management. 
 
Acknowledgements I would like to dedicate this work to my teacher, Prof. I.V. Romanovsky, and 
thank my scientific supervisor, Prof. D.V. Koznov, for his help and attention to detail. 
 
 
